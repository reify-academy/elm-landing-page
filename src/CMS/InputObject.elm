-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CMS.InputObject exposing (AssetCreateInput(..), AssetCreateInputOptionalFields, AssetCreateInputRaw, AssetCreateInputRequiredFields, AssetCreateOneWithoutImagePageInput, AssetCreateOneWithoutImagePageInputOptionalFields, AssetCreateWithoutImagePageInput, AssetCreateWithoutImagePageInputOptionalFields, AssetCreateWithoutImagePageInputRequiredFields, AssetSubscriptionWhereInput(..), AssetSubscriptionWhereInputOptionalFields, AssetSubscriptionWhereInputRaw, AssetTransformationInput, AssetTransformationInputOptionalFields, AssetUpdateInput(..), AssetUpdateInputOptionalFields, AssetUpdateInputRaw, AssetUpdateManyMutationInput, AssetUpdateManyMutationInputOptionalFields, AssetUpdateOneWithoutImagePageInput, AssetUpdateOneWithoutImagePageInputOptionalFields, AssetUpdateWithoutImagePageDataInput, AssetUpdateWithoutImagePageDataInputOptionalFields, AssetUpsertWithoutImagePageInput, AssetUpsertWithoutImagePageInputRequiredFields, AssetWhereInput(..), AssetWhereInputOptionalFields, AssetWhereInputRaw, AssetWhereUniqueInput, AssetWhereUniqueInputOptionalFields, CallToActionCreateInput(..), CallToActionCreateInputOptionalFields, CallToActionCreateInputRaw, CallToActionCreateOneWithoutPagesInput, CallToActionCreateOneWithoutPagesInputOptionalFields, CallToActionCreateWithoutPagesInput, CallToActionCreateWithoutPagesInputOptionalFields, CallToActionSubscriptionWhereInput(..), CallToActionSubscriptionWhereInputOptionalFields, CallToActionSubscriptionWhereInputRaw, CallToActionUpdateInput(..), CallToActionUpdateInputOptionalFields, CallToActionUpdateInputRaw, CallToActionUpdateManyMutationInput, CallToActionUpdateManyMutationInputOptionalFields, CallToActionUpdateOneWithoutPagesInput, CallToActionUpdateOneWithoutPagesInputOptionalFields, CallToActionUpdateWithoutPagesDataInput, CallToActionUpdateWithoutPagesDataInputOptionalFields, CallToActionUpsertWithoutPagesInput, CallToActionUpsertWithoutPagesInputRequiredFields, CallToActionWhereInput(..), CallToActionWhereInputOptionalFields, CallToActionWhereInputRaw, CallToActionWhereUniqueInput, CallToActionWhereUniqueInputOptionalFields, ColorSubscriptionWhereInput(..), ColorSubscriptionWhereInputOptionalFields, ColorSubscriptionWhereInputRaw, ColorWhereInput(..), ColorWhereInputOptionalFields, ColorWhereInputRaw, ColorWhereUniqueInput, ColorWhereUniqueInputOptionalFields, DocumentOutputInput, DocumentOutputInputOptionalFields, DocumentTransformationInput, DocumentTransformationInputOptionalFields, ExplanationBlockCreateInput, ExplanationBlockCreateInputOptionalFields, ExplanationBlockCreateInputRequiredFields, ExplanationBlockSubscriptionWhereInput(..), ExplanationBlockSubscriptionWhereInputOptionalFields, ExplanationBlockSubscriptionWhereInputRaw, ExplanationBlockUpdateInput, ExplanationBlockUpdateInputOptionalFields, ExplanationBlockUpdateManyMutationInput, ExplanationBlockUpdateManyMutationInputOptionalFields, ExplanationBlockWhereInput(..), ExplanationBlockWhereInputOptionalFields, ExplanationBlockWhereInputRaw, ExplanationBlockWhereUniqueInput, ExplanationBlockWhereUniqueInputOptionalFields, FaqCreateInput, FaqCreateInputOptionalFields, FaqSubscriptionWhereInput(..), FaqSubscriptionWhereInputOptionalFields, FaqSubscriptionWhereInputRaw, FaqUpdateInput, FaqUpdateInputOptionalFields, FaqUpdateManyMutationInput, FaqUpdateManyMutationInputOptionalFields, FaqWhereInput(..), FaqWhereInputOptionalFields, FaqWhereInputRaw, FaqWhereUniqueInput, FaqWhereUniqueInputOptionalFields, ImageResizeInput, ImageResizeInputOptionalFields, ImageTransformationInput, ImageTransformationInputOptionalFields, LocationSubscriptionWhereInput(..), LocationSubscriptionWhereInputOptionalFields, LocationSubscriptionWhereInputRaw, LocationWhereInput(..), LocationWhereInputOptionalFields, LocationWhereInputRaw, LocationWhereUniqueInput, LocationWhereUniqueInputOptionalFields, PageCreateInput, PageCreateInputOptionalFields, PageCreateInputRequiredFields, PageCreateManyWithoutCallToActionInput(..), PageCreateManyWithoutCallToActionInputOptionalFields, PageCreateManyWithoutCallToActionInputRaw, PageCreateManyWithoutImageInput(..), PageCreateManyWithoutImageInputOptionalFields, PageCreateManyWithoutImageInputRaw, PageCreateWithoutCallToActionInput, PageCreateWithoutCallToActionInputOptionalFields, PageCreateWithoutCallToActionInputRequiredFields, PageCreateWithoutImageInput, PageCreateWithoutImageInputOptionalFields, PageCreateWithoutImageInputRequiredFields, PageSubscriptionWhereInput(..), PageSubscriptionWhereInputOptionalFields, PageSubscriptionWhereInputRaw, PageUpdateInput(..), PageUpdateInputOptionalFields, PageUpdateInputRaw, PageUpdateManyMutationInput, PageUpdateManyMutationInputOptionalFields, PageUpdateManyWithoutCallToActionInput(..), PageUpdateManyWithoutCallToActionInputOptionalFields, PageUpdateManyWithoutCallToActionInputRaw, PageUpdateManyWithoutImageInput(..), PageUpdateManyWithoutImageInputOptionalFields, PageUpdateManyWithoutImageInputRaw, PageUpdateWithWhereUniqueWithoutCallToActionInput(..), PageUpdateWithWhereUniqueWithoutCallToActionInputRaw, PageUpdateWithWhereUniqueWithoutCallToActionInputRequiredFields, PageUpdateWithWhereUniqueWithoutImageInput(..), PageUpdateWithWhereUniqueWithoutImageInputRaw, PageUpdateWithWhereUniqueWithoutImageInputRequiredFields, PageUpdateWithoutCallToActionDataInput(..), PageUpdateWithoutCallToActionDataInputOptionalFields, PageUpdateWithoutCallToActionDataInputRaw, PageUpdateWithoutImageDataInput(..), PageUpdateWithoutImageDataInputOptionalFields, PageUpdateWithoutImageDataInputRaw, PageUpsertWithWhereUniqueWithoutCallToActionInput(..), PageUpsertWithWhereUniqueWithoutCallToActionInputRaw, PageUpsertWithWhereUniqueWithoutCallToActionInputRequiredFields, PageUpsertWithWhereUniqueWithoutImageInput(..), PageUpsertWithWhereUniqueWithoutImageInputRaw, PageUpsertWithWhereUniqueWithoutImageInputRequiredFields, PageWhereInput(..), PageWhereInputOptionalFields, PageWhereInputRaw, PageWhereUniqueInput, PageWhereUniqueInputOptionalFields, buildAssetCreateInput, buildAssetCreateOneWithoutImagePageInput, buildAssetCreateWithoutImagePageInput, buildAssetSubscriptionWhereInput, buildAssetTransformationInput, buildAssetUpdateInput, buildAssetUpdateManyMutationInput, buildAssetUpdateOneWithoutImagePageInput, buildAssetUpdateWithoutImagePageDataInput, buildAssetUpsertWithoutImagePageInput, buildAssetWhereInput, buildAssetWhereUniqueInput, buildCallToActionCreateInput, buildCallToActionCreateOneWithoutPagesInput, buildCallToActionCreateWithoutPagesInput, buildCallToActionSubscriptionWhereInput, buildCallToActionUpdateInput, buildCallToActionUpdateManyMutationInput, buildCallToActionUpdateOneWithoutPagesInput, buildCallToActionUpdateWithoutPagesDataInput, buildCallToActionUpsertWithoutPagesInput, buildCallToActionWhereInput, buildCallToActionWhereUniqueInput, buildColorSubscriptionWhereInput, buildColorWhereInput, buildColorWhereUniqueInput, buildDocumentOutputInput, buildDocumentTransformationInput, buildExplanationBlockCreateInput, buildExplanationBlockSubscriptionWhereInput, buildExplanationBlockUpdateInput, buildExplanationBlockUpdateManyMutationInput, buildExplanationBlockWhereInput, buildExplanationBlockWhereUniqueInput, buildFaqCreateInput, buildFaqSubscriptionWhereInput, buildFaqUpdateInput, buildFaqUpdateManyMutationInput, buildFaqWhereInput, buildFaqWhereUniqueInput, buildImageResizeInput, buildImageTransformationInput, buildLocationSubscriptionWhereInput, buildLocationWhereInput, buildLocationWhereUniqueInput, buildPageCreateInput, buildPageCreateManyWithoutCallToActionInput, buildPageCreateManyWithoutImageInput, buildPageCreateWithoutCallToActionInput, buildPageCreateWithoutImageInput, buildPageSubscriptionWhereInput, buildPageUpdateInput, buildPageUpdateManyMutationInput, buildPageUpdateManyWithoutCallToActionInput, buildPageUpdateManyWithoutImageInput, buildPageUpdateWithWhereUniqueWithoutCallToActionInput, buildPageUpdateWithWhereUniqueWithoutImageInput, buildPageUpdateWithoutCallToActionDataInput, buildPageUpdateWithoutImageDataInput, buildPageUpsertWithWhereUniqueWithoutCallToActionInput, buildPageUpsertWithWhereUniqueWithoutImageInput, buildPageWhereInput, buildPageWhereUniqueInput, encodeAssetCreateInput, encodeAssetCreateOneWithoutImagePageInput, encodeAssetCreateWithoutImagePageInput, encodeAssetSubscriptionWhereInput, encodeAssetTransformationInput, encodeAssetUpdateInput, encodeAssetUpdateManyMutationInput, encodeAssetUpdateOneWithoutImagePageInput, encodeAssetUpdateWithoutImagePageDataInput, encodeAssetUpsertWithoutImagePageInput, encodeAssetWhereInput, encodeAssetWhereUniqueInput, encodeCallToActionCreateInput, encodeCallToActionCreateOneWithoutPagesInput, encodeCallToActionCreateWithoutPagesInput, encodeCallToActionSubscriptionWhereInput, encodeCallToActionUpdateInput, encodeCallToActionUpdateManyMutationInput, encodeCallToActionUpdateOneWithoutPagesInput, encodeCallToActionUpdateWithoutPagesDataInput, encodeCallToActionUpsertWithoutPagesInput, encodeCallToActionWhereInput, encodeCallToActionWhereUniqueInput, encodeColorSubscriptionWhereInput, encodeColorWhereInput, encodeColorWhereUniqueInput, encodeDocumentOutputInput, encodeDocumentTransformationInput, encodeExplanationBlockCreateInput, encodeExplanationBlockSubscriptionWhereInput, encodeExplanationBlockUpdateInput, encodeExplanationBlockUpdateManyMutationInput, encodeExplanationBlockWhereInput, encodeExplanationBlockWhereUniqueInput, encodeFaqCreateInput, encodeFaqSubscriptionWhereInput, encodeFaqUpdateInput, encodeFaqUpdateManyMutationInput, encodeFaqWhereInput, encodeFaqWhereUniqueInput, encodeImageResizeInput, encodeImageTransformationInput, encodeLocationSubscriptionWhereInput, encodeLocationWhereInput, encodeLocationWhereUniqueInput, encodePageCreateInput, encodePageCreateManyWithoutCallToActionInput, encodePageCreateManyWithoutImageInput, encodePageCreateWithoutCallToActionInput, encodePageCreateWithoutImageInput, encodePageSubscriptionWhereInput, encodePageUpdateInput, encodePageUpdateManyMutationInput, encodePageUpdateManyWithoutCallToActionInput, encodePageUpdateManyWithoutImageInput, encodePageUpdateWithWhereUniqueWithoutCallToActionInput, encodePageUpdateWithWhereUniqueWithoutImageInput, encodePageUpdateWithoutCallToActionDataInput, encodePageUpdateWithoutImageDataInput, encodePageUpsertWithWhereUniqueWithoutCallToActionInput, encodePageUpsertWithWhereUniqueWithoutImageInput, encodePageWhereInput, encodePageWhereUniqueInput)

import CMS.Enum.CallToActionPlacement
import CMS.Enum.DocumentFileTypes
import CMS.Enum.ExplanationTypes
import CMS.Enum.ImageFit
import CMS.Enum.MutationType
import CMS.Enum.Status
import CMS.Interface
import CMS.Object
import CMS.Scalar
import CMS.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAssetCreateInput : AssetCreateInputRequiredFields -> (AssetCreateInputOptionalFields -> AssetCreateInputOptionalFields) -> AssetCreateInput
buildAssetCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, imagePage = Absent }
    in
    AssetCreateInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, imagePage = optionals.imagePage }


type alias AssetCreateInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagePage : OptionalArgument PageCreateManyWithoutImageInput
    }


{-| Type alias for the `AssetCreateInput` attributes. Note that this type
needs to use the `AssetCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagePage : OptionalArgument PageCreateManyWithoutImageInput
    }


{-| Type for the AssetCreateInput input object.
-}
type AssetCreateInput
    = AssetCreateInput AssetCreateInputRaw


{-| Encode a AssetCreateInput into a value that can be used as an argument.
-}
encodeAssetCreateInput : AssetCreateInput -> Value
encodeAssetCreateInput (AssetCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "imagePage", encodePageCreateManyWithoutImageInput |> Encode.optional input.imagePage ) ]


buildAssetCreateOneWithoutImagePageInput : (AssetCreateOneWithoutImagePageInputOptionalFields -> AssetCreateOneWithoutImagePageInputOptionalFields) -> AssetCreateOneWithoutImagePageInput
buildAssetCreateOneWithoutImagePageInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    { create = optionals.create, connect = optionals.connect }


type alias AssetCreateOneWithoutImagePageInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutImagePageInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type for the AssetCreateOneWithoutImagePageInput input object.
-}
type alias AssetCreateOneWithoutImagePageInput =
    { create : OptionalArgument AssetCreateWithoutImagePageInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Encode a AssetCreateOneWithoutImagePageInput into a value that can be used as an argument.
-}
encodeAssetCreateOneWithoutImagePageInput : AssetCreateOneWithoutImagePageInput -> Value
encodeAssetCreateOneWithoutImagePageInput input =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutImagePageInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ) ]


buildAssetCreateWithoutImagePageInput : AssetCreateWithoutImagePageInputRequiredFields -> (AssetCreateWithoutImagePageInputOptionalFields -> AssetCreateWithoutImagePageInputOptionalFields) -> AssetCreateWithoutImagePageInput
buildAssetCreateWithoutImagePageInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetCreateWithoutImagePageInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutImagePageInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetCreateWithoutImagePageInput input object.
-}
type alias AssetCreateWithoutImagePageInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetCreateWithoutImagePageInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutImagePageInput : AssetCreateWithoutImagePageInput -> Value
encodeAssetCreateWithoutImagePageInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetSubscriptionWhereInput : (AssetSubscriptionWhereInputOptionalFields -> AssetSubscriptionWhereInputOptionalFields) -> AssetSubscriptionWhereInput
buildAssetSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    AssetSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias AssetSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List AssetSubscriptionWhereInput)
    , or : OptionalArgument (List AssetSubscriptionWhereInput)
    , not : OptionalArgument (List AssetSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `AssetSubscriptionWhereInput` attributes. Note that this type
needs to use the `AssetSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetSubscriptionWhereInputRaw =
    { and : OptionalArgument (List AssetSubscriptionWhereInput)
    , or : OptionalArgument (List AssetSubscriptionWhereInput)
    , not : OptionalArgument (List AssetSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument AssetWhereInput
    }


{-| Type for the AssetSubscriptionWhereInput input object.
-}
type AssetSubscriptionWhereInput
    = AssetSubscriptionWhereInput AssetSubscriptionWhereInputRaw


{-| Encode a AssetSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeAssetSubscriptionWhereInput : AssetSubscriptionWhereInput -> Value
encodeAssetSubscriptionWhereInput (AssetSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeAssetWhereInput |> Encode.optional input.node ) ]


buildAssetTransformationInput : (AssetTransformationInputOptionalFields -> AssetTransformationInputOptionalFields) -> AssetTransformationInput
buildAssetTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { image = Absent, document = Absent, validateOptions = Absent }
    in
    { image = optionals.image, document = optionals.document, validateOptions = optionals.validateOptions }


type alias AssetTransformationInputOptionalFields =
    { image : OptionalArgument ImageTransformationInput
    , document : OptionalArgument DocumentTransformationInput
    , validateOptions : OptionalArgument Bool
    }


{-| Type for the AssetTransformationInput input object.
-}
type alias AssetTransformationInput =
    { image : OptionalArgument ImageTransformationInput
    , document : OptionalArgument DocumentTransformationInput
    , validateOptions : OptionalArgument Bool
    }


{-| Encode a AssetTransformationInput into a value that can be used as an argument.
-}
encodeAssetTransformationInput : AssetTransformationInput -> Value
encodeAssetTransformationInput input =
    Encode.maybeObject
        [ ( "image", encodeImageTransformationInput |> Encode.optional input.image ), ( "document", encodeDocumentTransformationInput |> Encode.optional input.document ), ( "validateOptions", Encode.bool |> Encode.optional input.validateOptions ) ]


buildAssetUpdateInput : (AssetUpdateInputOptionalFields -> AssetUpdateInputOptionalFields) -> AssetUpdateInput
buildAssetUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, imagePage = Absent }
    in
    AssetUpdateInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, imagePage = optionals.imagePage }


type alias AssetUpdateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagePage : OptionalArgument PageUpdateManyWithoutImageInput
    }


{-| Type alias for the `AssetUpdateInput` attributes. Note that this type
needs to use the `AssetUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagePage : OptionalArgument PageUpdateManyWithoutImageInput
    }


{-| Type for the AssetUpdateInput input object.
-}
type AssetUpdateInput
    = AssetUpdateInput AssetUpdateInputRaw


{-| Encode a AssetUpdateInput into a value that can be used as an argument.
-}
encodeAssetUpdateInput : AssetUpdateInput -> Value
encodeAssetUpdateInput (AssetUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "imagePage", encodePageUpdateManyWithoutImageInput |> Encode.optional input.imagePage ) ]


buildAssetUpdateManyMutationInput : (AssetUpdateManyMutationInputOptionalFields -> AssetUpdateManyMutationInputOptionalFields) -> AssetUpdateManyMutationInput
buildAssetUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetUpdateManyMutationInput input object.
-}
type alias AssetUpdateManyMutationInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyMutationInput : AssetUpdateManyMutationInput -> Value
encodeAssetUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetUpdateOneWithoutImagePageInput : (AssetUpdateOneWithoutImagePageInputOptionalFields -> AssetUpdateOneWithoutImagePageInputOptionalFields) -> AssetUpdateOneWithoutImagePageInput
buildAssetUpdateOneWithoutImagePageInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias AssetUpdateOneWithoutImagePageInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutImagePageInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutImagePageDataInput
    , upsert : OptionalArgument AssetUpsertWithoutImagePageInput
    }


{-| Type for the AssetUpdateOneWithoutImagePageInput input object.
-}
type alias AssetUpdateOneWithoutImagePageInput =
    { create : OptionalArgument AssetCreateWithoutImagePageInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutImagePageDataInput
    , upsert : OptionalArgument AssetUpsertWithoutImagePageInput
    }


{-| Encode a AssetUpdateOneWithoutImagePageInput into a value that can be used as an argument.
-}
encodeAssetUpdateOneWithoutImagePageInput : AssetUpdateOneWithoutImagePageInput -> Value
encodeAssetUpdateOneWithoutImagePageInput input =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutImagePageInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ), ( "disconnect", Encode.bool |> Encode.optional input.disconnect ), ( "delete", Encode.bool |> Encode.optional input.delete ), ( "update", encodeAssetUpdateWithoutImagePageDataInput |> Encode.optional input.update ), ( "upsert", encodeAssetUpsertWithoutImagePageInput |> Encode.optional input.upsert ) ]


buildAssetUpdateWithoutImagePageDataInput : (AssetUpdateWithoutImagePageDataInputOptionalFields -> AssetUpdateWithoutImagePageDataInputOptionalFields) -> AssetUpdateWithoutImagePageDataInput
buildAssetUpdateWithoutImagePageDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetUpdateWithoutImagePageDataInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetUpdateWithoutImagePageDataInput input object.
-}
type alias AssetUpdateWithoutImagePageDataInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetUpdateWithoutImagePageDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutImagePageDataInput : AssetUpdateWithoutImagePageDataInput -> Value
encodeAssetUpdateWithoutImagePageDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetUpsertWithoutImagePageInput : AssetUpsertWithoutImagePageInputRequiredFields -> AssetUpsertWithoutImagePageInput
buildAssetUpsertWithoutImagePageInput required =
    { update = required.update, create = required.create }


type alias AssetUpsertWithoutImagePageInputRequiredFields =
    { update : AssetUpdateWithoutImagePageDataInput
    , create : AssetCreateWithoutImagePageInput
    }


{-| Type for the AssetUpsertWithoutImagePageInput input object.
-}
type alias AssetUpsertWithoutImagePageInput =
    { update : AssetUpdateWithoutImagePageDataInput
    , create : AssetCreateWithoutImagePageInput
    }


{-| Encode a AssetUpsertWithoutImagePageInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithoutImagePageInput : AssetUpsertWithoutImagePageInput -> Value
encodeAssetUpsertWithoutImagePageInput input =
    Encode.maybeObject
        [ ( "update", encodeAssetUpdateWithoutImagePageDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutImagePageInput input.create |> Just ) ]


buildAssetWhereInput : (AssetWhereInputOptionalFields -> AssetWhereInputOptionalFields) -> AssetWhereInput
buildAssetWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent, fileName = Absent, fileName_not = Absent, fileName_in = Absent, fileName_not_in = Absent, fileName_lt = Absent, fileName_lte = Absent, fileName_gt = Absent, fileName_gte = Absent, fileName_contains = Absent, fileName_not_contains = Absent, fileName_starts_with = Absent, fileName_not_starts_with = Absent, fileName_ends_with = Absent, fileName_not_ends_with = Absent, height = Absent, height_not = Absent, height_in = Absent, height_not_in = Absent, height_lt = Absent, height_lte = Absent, height_gt = Absent, height_gte = Absent, mimeType = Absent, mimeType_not = Absent, mimeType_in = Absent, mimeType_not_in = Absent, mimeType_lt = Absent, mimeType_lte = Absent, mimeType_gt = Absent, mimeType_gte = Absent, mimeType_contains = Absent, mimeType_not_contains = Absent, mimeType_starts_with = Absent, mimeType_not_starts_with = Absent, mimeType_ends_with = Absent, mimeType_not_ends_with = Absent, size = Absent, size_not = Absent, size_in = Absent, size_not_in = Absent, size_lt = Absent, size_lte = Absent, size_gt = Absent, size_gte = Absent, width = Absent, width_not = Absent, width_in = Absent, width_not_in = Absent, width_lt = Absent, width_lte = Absent, width_gt = Absent, width_gte = Absent, imagePage_every = Absent, imagePage_some = Absent, imagePage_none = Absent }
    in
    AssetWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with, fileName = optionals.fileName, fileName_not = optionals.fileName_not, fileName_in = optionals.fileName_in, fileName_not_in = optionals.fileName_not_in, fileName_lt = optionals.fileName_lt, fileName_lte = optionals.fileName_lte, fileName_gt = optionals.fileName_gt, fileName_gte = optionals.fileName_gte, fileName_contains = optionals.fileName_contains, fileName_not_contains = optionals.fileName_not_contains, fileName_starts_with = optionals.fileName_starts_with, fileName_not_starts_with = optionals.fileName_not_starts_with, fileName_ends_with = optionals.fileName_ends_with, fileName_not_ends_with = optionals.fileName_not_ends_with, height = optionals.height, height_not = optionals.height_not, height_in = optionals.height_in, height_not_in = optionals.height_not_in, height_lt = optionals.height_lt, height_lte = optionals.height_lte, height_gt = optionals.height_gt, height_gte = optionals.height_gte, mimeType = optionals.mimeType, mimeType_not = optionals.mimeType_not, mimeType_in = optionals.mimeType_in, mimeType_not_in = optionals.mimeType_not_in, mimeType_lt = optionals.mimeType_lt, mimeType_lte = optionals.mimeType_lte, mimeType_gt = optionals.mimeType_gt, mimeType_gte = optionals.mimeType_gte, mimeType_contains = optionals.mimeType_contains, mimeType_not_contains = optionals.mimeType_not_contains, mimeType_starts_with = optionals.mimeType_starts_with, mimeType_not_starts_with = optionals.mimeType_not_starts_with, mimeType_ends_with = optionals.mimeType_ends_with, mimeType_not_ends_with = optionals.mimeType_not_ends_with, size = optionals.size, size_not = optionals.size_not, size_in = optionals.size_in, size_not_in = optionals.size_not_in, size_lt = optionals.size_lt, size_lte = optionals.size_lte, size_gt = optionals.size_gt, size_gte = optionals.size_gte, width = optionals.width, width_not = optionals.width_not, width_in = optionals.width_in, width_not_in = optionals.width_not_in, width_lt = optionals.width_lt, width_lte = optionals.width_lte, width_gt = optionals.width_gt, width_gte = optionals.width_gte, imagePage_every = optionals.imagePage_every, imagePage_some = optionals.imagePage_some, imagePage_none = optionals.imagePage_none }


type alias AssetWhereInputOptionalFields =
    { and : OptionalArgument (List AssetWhereInput)
    , or : OptionalArgument (List AssetWhereInput)
    , not : OptionalArgument (List AssetWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    , imagePage_every : OptionalArgument PageWhereInput
    , imagePage_some : OptionalArgument PageWhereInput
    , imagePage_none : OptionalArgument PageWhereInput
    }


{-| Type alias for the `AssetWhereInput` attributes. Note that this type
needs to use the `AssetWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetWhereInputRaw =
    { and : OptionalArgument (List AssetWhereInput)
    , or : OptionalArgument (List AssetWhereInput)
    , not : OptionalArgument (List AssetWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    , imagePage_every : OptionalArgument PageWhereInput
    , imagePage_some : OptionalArgument PageWhereInput
    , imagePage_none : OptionalArgument PageWhereInput
    }


{-| Type for the AssetWhereInput input object.
-}
type AssetWhereInput
    = AssetWhereInput AssetWhereInputRaw


{-| Encode a AssetWhereInput into a value that can be used as an argument.
-}
encodeAssetWhereInput : AssetWhereInput -> Value
encodeAssetWhereInput (AssetWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "fileName_not", Encode.string |> Encode.optional input.fileName_not ), ( "fileName_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_in ), ( "fileName_not_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_not_in ), ( "fileName_lt", Encode.string |> Encode.optional input.fileName_lt ), ( "fileName_lte", Encode.string |> Encode.optional input.fileName_lte ), ( "fileName_gt", Encode.string |> Encode.optional input.fileName_gt ), ( "fileName_gte", Encode.string |> Encode.optional input.fileName_gte ), ( "fileName_contains", Encode.string |> Encode.optional input.fileName_contains ), ( "fileName_not_contains", Encode.string |> Encode.optional input.fileName_not_contains ), ( "fileName_starts_with", Encode.string |> Encode.optional input.fileName_starts_with ), ( "fileName_not_starts_with", Encode.string |> Encode.optional input.fileName_not_starts_with ), ( "fileName_ends_with", Encode.string |> Encode.optional input.fileName_ends_with ), ( "fileName_not_ends_with", Encode.string |> Encode.optional input.fileName_not_ends_with ), ( "height", Encode.float |> Encode.optional input.height ), ( "height_not", Encode.float |> Encode.optional input.height_not ), ( "height_in", (Encode.float |> Encode.list) |> Encode.optional input.height_in ), ( "height_not_in", (Encode.float |> Encode.list) |> Encode.optional input.height_not_in ), ( "height_lt", Encode.float |> Encode.optional input.height_lt ), ( "height_lte", Encode.float |> Encode.optional input.height_lte ), ( "height_gt", Encode.float |> Encode.optional input.height_gt ), ( "height_gte", Encode.float |> Encode.optional input.height_gte ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "mimeType_not", Encode.string |> Encode.optional input.mimeType_not ), ( "mimeType_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_in ), ( "mimeType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_not_in ), ( "mimeType_lt", Encode.string |> Encode.optional input.mimeType_lt ), ( "mimeType_lte", Encode.string |> Encode.optional input.mimeType_lte ), ( "mimeType_gt", Encode.string |> Encode.optional input.mimeType_gt ), ( "mimeType_gte", Encode.string |> Encode.optional input.mimeType_gte ), ( "mimeType_contains", Encode.string |> Encode.optional input.mimeType_contains ), ( "mimeType_not_contains", Encode.string |> Encode.optional input.mimeType_not_contains ), ( "mimeType_starts_with", Encode.string |> Encode.optional input.mimeType_starts_with ), ( "mimeType_not_starts_with", Encode.string |> Encode.optional input.mimeType_not_starts_with ), ( "mimeType_ends_with", Encode.string |> Encode.optional input.mimeType_ends_with ), ( "mimeType_not_ends_with", Encode.string |> Encode.optional input.mimeType_not_ends_with ), ( "size", Encode.float |> Encode.optional input.size ), ( "size_not", Encode.float |> Encode.optional input.size_not ), ( "size_in", (Encode.float |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.float |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.float |> Encode.optional input.size_lt ), ( "size_lte", Encode.float |> Encode.optional input.size_lte ), ( "size_gt", Encode.float |> Encode.optional input.size_gt ), ( "size_gte", Encode.float |> Encode.optional input.size_gte ), ( "width", Encode.float |> Encode.optional input.width ), ( "width_not", Encode.float |> Encode.optional input.width_not ), ( "width_in", (Encode.float |> Encode.list) |> Encode.optional input.width_in ), ( "width_not_in", (Encode.float |> Encode.list) |> Encode.optional input.width_not_in ), ( "width_lt", Encode.float |> Encode.optional input.width_lt ), ( "width_lte", Encode.float |> Encode.optional input.width_lte ), ( "width_gt", Encode.float |> Encode.optional input.width_gt ), ( "width_gte", Encode.float |> Encode.optional input.width_gte ), ( "imagePage_every", encodePageWhereInput |> Encode.optional input.imagePage_every ), ( "imagePage_some", encodePageWhereInput |> Encode.optional input.imagePage_some ), ( "imagePage_none", encodePageWhereInput |> Encode.optional input.imagePage_none ) ]


buildAssetWhereUniqueInput : (AssetWhereUniqueInputOptionalFields -> AssetWhereUniqueInputOptionalFields) -> AssetWhereUniqueInput
buildAssetWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, handle = Absent }
    in
    { id = optionals.id, handle = optionals.handle }


type alias AssetWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id
    , handle : OptionalArgument String
    }


{-| Type for the AssetWhereUniqueInput input object.
-}
type alias AssetWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id
    , handle : OptionalArgument String
    }


{-| Encode a AssetWhereUniqueInput into a value that can be used as an argument.
-}
encodeAssetWhereUniqueInput : AssetWhereUniqueInput -> Value
encodeAssetWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "handle", Encode.string |> Encode.optional input.handle ) ]


buildCallToActionCreateInput : (CallToActionCreateInputOptionalFields -> CallToActionCreateInputOptionalFields) -> CallToActionCreateInput
buildCallToActionCreateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, placement = Absent, actionUrl = Absent, label = Absent, pages = Absent }
    in
    CallToActionCreateInput { status = optionals.status, placement = optionals.placement, actionUrl = optionals.actionUrl, label = optionals.label, pages = optionals.pages }


type alias CallToActionCreateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    , pages : OptionalArgument PageCreateManyWithoutCallToActionInput
    }


{-| Type alias for the `CallToActionCreateInput` attributes. Note that this type
needs to use the `CallToActionCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CallToActionCreateInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    , pages : OptionalArgument PageCreateManyWithoutCallToActionInput
    }


{-| Type for the CallToActionCreateInput input object.
-}
type CallToActionCreateInput
    = CallToActionCreateInput CallToActionCreateInputRaw


{-| Encode a CallToActionCreateInput into a value that can be used as an argument.
-}
encodeCallToActionCreateInput : CallToActionCreateInput -> Value
encodeCallToActionCreateInput (CallToActionCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "placement", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement ), ( "actionUrl", Encode.string |> Encode.optional input.actionUrl ), ( "label", Encode.string |> Encode.optional input.label ), ( "pages", encodePageCreateManyWithoutCallToActionInput |> Encode.optional input.pages ) ]


buildCallToActionCreateOneWithoutPagesInput : (CallToActionCreateOneWithoutPagesInputOptionalFields -> CallToActionCreateOneWithoutPagesInputOptionalFields) -> CallToActionCreateOneWithoutPagesInput
buildCallToActionCreateOneWithoutPagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    { create = optionals.create, connect = optionals.connect }


type alias CallToActionCreateOneWithoutPagesInputOptionalFields =
    { create : OptionalArgument CallToActionCreateWithoutPagesInput
    , connect : OptionalArgument CallToActionWhereUniqueInput
    }


{-| Type for the CallToActionCreateOneWithoutPagesInput input object.
-}
type alias CallToActionCreateOneWithoutPagesInput =
    { create : OptionalArgument CallToActionCreateWithoutPagesInput
    , connect : OptionalArgument CallToActionWhereUniqueInput
    }


{-| Encode a CallToActionCreateOneWithoutPagesInput into a value that can be used as an argument.
-}
encodeCallToActionCreateOneWithoutPagesInput : CallToActionCreateOneWithoutPagesInput -> Value
encodeCallToActionCreateOneWithoutPagesInput input =
    Encode.maybeObject
        [ ( "create", encodeCallToActionCreateWithoutPagesInput |> Encode.optional input.create ), ( "connect", encodeCallToActionWhereUniqueInput |> Encode.optional input.connect ) ]


buildCallToActionCreateWithoutPagesInput : (CallToActionCreateWithoutPagesInputOptionalFields -> CallToActionCreateWithoutPagesInputOptionalFields) -> CallToActionCreateWithoutPagesInput
buildCallToActionCreateWithoutPagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, placement = Absent, actionUrl = Absent, label = Absent }
    in
    { status = optionals.status, placement = optionals.placement, actionUrl = optionals.actionUrl, label = optionals.label }


type alias CallToActionCreateWithoutPagesInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    }


{-| Type for the CallToActionCreateWithoutPagesInput input object.
-}
type alias CallToActionCreateWithoutPagesInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    }


{-| Encode a CallToActionCreateWithoutPagesInput into a value that can be used as an argument.
-}
encodeCallToActionCreateWithoutPagesInput : CallToActionCreateWithoutPagesInput -> Value
encodeCallToActionCreateWithoutPagesInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "placement", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement ), ( "actionUrl", Encode.string |> Encode.optional input.actionUrl ), ( "label", Encode.string |> Encode.optional input.label ) ]


buildCallToActionSubscriptionWhereInput : (CallToActionSubscriptionWhereInputOptionalFields -> CallToActionSubscriptionWhereInputOptionalFields) -> CallToActionSubscriptionWhereInput
buildCallToActionSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    CallToActionSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias CallToActionSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List CallToActionSubscriptionWhereInput)
    , or : OptionalArgument (List CallToActionSubscriptionWhereInput)
    , not : OptionalArgument (List CallToActionSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument CallToActionWhereInput
    }


{-| Type alias for the `CallToActionSubscriptionWhereInput` attributes. Note that this type
needs to use the `CallToActionSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CallToActionSubscriptionWhereInputRaw =
    { and : OptionalArgument (List CallToActionSubscriptionWhereInput)
    , or : OptionalArgument (List CallToActionSubscriptionWhereInput)
    , not : OptionalArgument (List CallToActionSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument CallToActionWhereInput
    }


{-| Type for the CallToActionSubscriptionWhereInput input object.
-}
type CallToActionSubscriptionWhereInput
    = CallToActionSubscriptionWhereInput CallToActionSubscriptionWhereInputRaw


{-| Encode a CallToActionSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeCallToActionSubscriptionWhereInput : CallToActionSubscriptionWhereInput -> Value
encodeCallToActionSubscriptionWhereInput (CallToActionSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeCallToActionSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeCallToActionSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeCallToActionSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeCallToActionWhereInput |> Encode.optional input.node ) ]


buildCallToActionUpdateInput : (CallToActionUpdateInputOptionalFields -> CallToActionUpdateInputOptionalFields) -> CallToActionUpdateInput
buildCallToActionUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, placement = Absent, actionUrl = Absent, label = Absent, pages = Absent }
    in
    CallToActionUpdateInput { status = optionals.status, placement = optionals.placement, actionUrl = optionals.actionUrl, label = optionals.label, pages = optionals.pages }


type alias CallToActionUpdateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    , pages : OptionalArgument PageUpdateManyWithoutCallToActionInput
    }


{-| Type alias for the `CallToActionUpdateInput` attributes. Note that this type
needs to use the `CallToActionUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CallToActionUpdateInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    , pages : OptionalArgument PageUpdateManyWithoutCallToActionInput
    }


{-| Type for the CallToActionUpdateInput input object.
-}
type CallToActionUpdateInput
    = CallToActionUpdateInput CallToActionUpdateInputRaw


{-| Encode a CallToActionUpdateInput into a value that can be used as an argument.
-}
encodeCallToActionUpdateInput : CallToActionUpdateInput -> Value
encodeCallToActionUpdateInput (CallToActionUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "placement", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement ), ( "actionUrl", Encode.string |> Encode.optional input.actionUrl ), ( "label", Encode.string |> Encode.optional input.label ), ( "pages", encodePageUpdateManyWithoutCallToActionInput |> Encode.optional input.pages ) ]


buildCallToActionUpdateManyMutationInput : (CallToActionUpdateManyMutationInputOptionalFields -> CallToActionUpdateManyMutationInputOptionalFields) -> CallToActionUpdateManyMutationInput
buildCallToActionUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, placement = Absent, actionUrl = Absent, label = Absent }
    in
    { status = optionals.status, placement = optionals.placement, actionUrl = optionals.actionUrl, label = optionals.label }


type alias CallToActionUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    }


{-| Type for the CallToActionUpdateManyMutationInput input object.
-}
type alias CallToActionUpdateManyMutationInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    }


{-| Encode a CallToActionUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeCallToActionUpdateManyMutationInput : CallToActionUpdateManyMutationInput -> Value
encodeCallToActionUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "placement", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement ), ( "actionUrl", Encode.string |> Encode.optional input.actionUrl ), ( "label", Encode.string |> Encode.optional input.label ) ]


buildCallToActionUpdateOneWithoutPagesInput : (CallToActionUpdateOneWithoutPagesInputOptionalFields -> CallToActionUpdateOneWithoutPagesInputOptionalFields) -> CallToActionUpdateOneWithoutPagesInput
buildCallToActionUpdateOneWithoutPagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias CallToActionUpdateOneWithoutPagesInputOptionalFields =
    { create : OptionalArgument CallToActionCreateWithoutPagesInput
    , connect : OptionalArgument CallToActionWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument CallToActionUpdateWithoutPagesDataInput
    , upsert : OptionalArgument CallToActionUpsertWithoutPagesInput
    }


{-| Type for the CallToActionUpdateOneWithoutPagesInput input object.
-}
type alias CallToActionUpdateOneWithoutPagesInput =
    { create : OptionalArgument CallToActionCreateWithoutPagesInput
    , connect : OptionalArgument CallToActionWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument CallToActionUpdateWithoutPagesDataInput
    , upsert : OptionalArgument CallToActionUpsertWithoutPagesInput
    }


{-| Encode a CallToActionUpdateOneWithoutPagesInput into a value that can be used as an argument.
-}
encodeCallToActionUpdateOneWithoutPagesInput : CallToActionUpdateOneWithoutPagesInput -> Value
encodeCallToActionUpdateOneWithoutPagesInput input =
    Encode.maybeObject
        [ ( "create", encodeCallToActionCreateWithoutPagesInput |> Encode.optional input.create ), ( "connect", encodeCallToActionWhereUniqueInput |> Encode.optional input.connect ), ( "disconnect", Encode.bool |> Encode.optional input.disconnect ), ( "delete", Encode.bool |> Encode.optional input.delete ), ( "update", encodeCallToActionUpdateWithoutPagesDataInput |> Encode.optional input.update ), ( "upsert", encodeCallToActionUpsertWithoutPagesInput |> Encode.optional input.upsert ) ]


buildCallToActionUpdateWithoutPagesDataInput : (CallToActionUpdateWithoutPagesDataInputOptionalFields -> CallToActionUpdateWithoutPagesDataInputOptionalFields) -> CallToActionUpdateWithoutPagesDataInput
buildCallToActionUpdateWithoutPagesDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, placement = Absent, actionUrl = Absent, label = Absent }
    in
    { status = optionals.status, placement = optionals.placement, actionUrl = optionals.actionUrl, label = optionals.label }


type alias CallToActionUpdateWithoutPagesDataInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    }


{-| Type for the CallToActionUpdateWithoutPagesDataInput input object.
-}
type alias CallToActionUpdateWithoutPagesDataInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , actionUrl : OptionalArgument String
    , label : OptionalArgument String
    }


{-| Encode a CallToActionUpdateWithoutPagesDataInput into a value that can be used as an argument.
-}
encodeCallToActionUpdateWithoutPagesDataInput : CallToActionUpdateWithoutPagesDataInput -> Value
encodeCallToActionUpdateWithoutPagesDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "placement", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement ), ( "actionUrl", Encode.string |> Encode.optional input.actionUrl ), ( "label", Encode.string |> Encode.optional input.label ) ]


buildCallToActionUpsertWithoutPagesInput : CallToActionUpsertWithoutPagesInputRequiredFields -> CallToActionUpsertWithoutPagesInput
buildCallToActionUpsertWithoutPagesInput required =
    { update = required.update, create = required.create }


type alias CallToActionUpsertWithoutPagesInputRequiredFields =
    { update : CallToActionUpdateWithoutPagesDataInput
    , create : CallToActionCreateWithoutPagesInput
    }


{-| Type for the CallToActionUpsertWithoutPagesInput input object.
-}
type alias CallToActionUpsertWithoutPagesInput =
    { update : CallToActionUpdateWithoutPagesDataInput
    , create : CallToActionCreateWithoutPagesInput
    }


{-| Encode a CallToActionUpsertWithoutPagesInput into a value that can be used as an argument.
-}
encodeCallToActionUpsertWithoutPagesInput : CallToActionUpsertWithoutPagesInput -> Value
encodeCallToActionUpsertWithoutPagesInput input =
    Encode.maybeObject
        [ ( "update", encodeCallToActionUpdateWithoutPagesDataInput input.update |> Just ), ( "create", encodeCallToActionCreateWithoutPagesInput input.create |> Just ) ]


buildCallToActionWhereInput : (CallToActionWhereInputOptionalFields -> CallToActionWhereInputOptionalFields) -> CallToActionWhereInput
buildCallToActionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, placement = Absent, placement_not = Absent, placement_in = Absent, placement_not_in = Absent, actionUrl = Absent, actionUrl_not = Absent, actionUrl_in = Absent, actionUrl_not_in = Absent, actionUrl_lt = Absent, actionUrl_lte = Absent, actionUrl_gt = Absent, actionUrl_gte = Absent, actionUrl_contains = Absent, actionUrl_not_contains = Absent, actionUrl_starts_with = Absent, actionUrl_not_starts_with = Absent, actionUrl_ends_with = Absent, actionUrl_not_ends_with = Absent, label = Absent, label_not = Absent, label_in = Absent, label_not_in = Absent, label_lt = Absent, label_lte = Absent, label_gt = Absent, label_gte = Absent, label_contains = Absent, label_not_contains = Absent, label_starts_with = Absent, label_not_starts_with = Absent, label_ends_with = Absent, label_not_ends_with = Absent, pages_every = Absent, pages_some = Absent, pages_none = Absent }
    in
    CallToActionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, placement = optionals.placement, placement_not = optionals.placement_not, placement_in = optionals.placement_in, placement_not_in = optionals.placement_not_in, actionUrl = optionals.actionUrl, actionUrl_not = optionals.actionUrl_not, actionUrl_in = optionals.actionUrl_in, actionUrl_not_in = optionals.actionUrl_not_in, actionUrl_lt = optionals.actionUrl_lt, actionUrl_lte = optionals.actionUrl_lte, actionUrl_gt = optionals.actionUrl_gt, actionUrl_gte = optionals.actionUrl_gte, actionUrl_contains = optionals.actionUrl_contains, actionUrl_not_contains = optionals.actionUrl_not_contains, actionUrl_starts_with = optionals.actionUrl_starts_with, actionUrl_not_starts_with = optionals.actionUrl_not_starts_with, actionUrl_ends_with = optionals.actionUrl_ends_with, actionUrl_not_ends_with = optionals.actionUrl_not_ends_with, label = optionals.label, label_not = optionals.label_not, label_in = optionals.label_in, label_not_in = optionals.label_not_in, label_lt = optionals.label_lt, label_lte = optionals.label_lte, label_gt = optionals.label_gt, label_gte = optionals.label_gte, label_contains = optionals.label_contains, label_not_contains = optionals.label_not_contains, label_starts_with = optionals.label_starts_with, label_not_starts_with = optionals.label_not_starts_with, label_ends_with = optionals.label_ends_with, label_not_ends_with = optionals.label_not_ends_with, pages_every = optionals.pages_every, pages_some = optionals.pages_some, pages_none = optionals.pages_none }


type alias CallToActionWhereInputOptionalFields =
    { and : OptionalArgument (List CallToActionWhereInput)
    , or : OptionalArgument (List CallToActionWhereInput)
    , not : OptionalArgument (List CallToActionWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , placement_not : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , placement_in : OptionalArgument (List CMS.Enum.CallToActionPlacement.CallToActionPlacement)
    , placement_not_in : OptionalArgument (List CMS.Enum.CallToActionPlacement.CallToActionPlacement)
    , actionUrl : OptionalArgument String
    , actionUrl_not : OptionalArgument String
    , actionUrl_in : OptionalArgument (List String)
    , actionUrl_not_in : OptionalArgument (List String)
    , actionUrl_lt : OptionalArgument String
    , actionUrl_lte : OptionalArgument String
    , actionUrl_gt : OptionalArgument String
    , actionUrl_gte : OptionalArgument String
    , actionUrl_contains : OptionalArgument String
    , actionUrl_not_contains : OptionalArgument String
    , actionUrl_starts_with : OptionalArgument String
    , actionUrl_not_starts_with : OptionalArgument String
    , actionUrl_ends_with : OptionalArgument String
    , actionUrl_not_ends_with : OptionalArgument String
    , label : OptionalArgument String
    , label_not : OptionalArgument String
    , label_in : OptionalArgument (List String)
    , label_not_in : OptionalArgument (List String)
    , label_lt : OptionalArgument String
    , label_lte : OptionalArgument String
    , label_gt : OptionalArgument String
    , label_gte : OptionalArgument String
    , label_contains : OptionalArgument String
    , label_not_contains : OptionalArgument String
    , label_starts_with : OptionalArgument String
    , label_not_starts_with : OptionalArgument String
    , label_ends_with : OptionalArgument String
    , label_not_ends_with : OptionalArgument String
    , pages_every : OptionalArgument PageWhereInput
    , pages_some : OptionalArgument PageWhereInput
    , pages_none : OptionalArgument PageWhereInput
    }


{-| Type alias for the `CallToActionWhereInput` attributes. Note that this type
needs to use the `CallToActionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CallToActionWhereInputRaw =
    { and : OptionalArgument (List CallToActionWhereInput)
    , or : OptionalArgument (List CallToActionWhereInput)
    , not : OptionalArgument (List CallToActionWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , placement : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , placement_not : OptionalArgument CMS.Enum.CallToActionPlacement.CallToActionPlacement
    , placement_in : OptionalArgument (List CMS.Enum.CallToActionPlacement.CallToActionPlacement)
    , placement_not_in : OptionalArgument (List CMS.Enum.CallToActionPlacement.CallToActionPlacement)
    , actionUrl : OptionalArgument String
    , actionUrl_not : OptionalArgument String
    , actionUrl_in : OptionalArgument (List String)
    , actionUrl_not_in : OptionalArgument (List String)
    , actionUrl_lt : OptionalArgument String
    , actionUrl_lte : OptionalArgument String
    , actionUrl_gt : OptionalArgument String
    , actionUrl_gte : OptionalArgument String
    , actionUrl_contains : OptionalArgument String
    , actionUrl_not_contains : OptionalArgument String
    , actionUrl_starts_with : OptionalArgument String
    , actionUrl_not_starts_with : OptionalArgument String
    , actionUrl_ends_with : OptionalArgument String
    , actionUrl_not_ends_with : OptionalArgument String
    , label : OptionalArgument String
    , label_not : OptionalArgument String
    , label_in : OptionalArgument (List String)
    , label_not_in : OptionalArgument (List String)
    , label_lt : OptionalArgument String
    , label_lte : OptionalArgument String
    , label_gt : OptionalArgument String
    , label_gte : OptionalArgument String
    , label_contains : OptionalArgument String
    , label_not_contains : OptionalArgument String
    , label_starts_with : OptionalArgument String
    , label_not_starts_with : OptionalArgument String
    , label_ends_with : OptionalArgument String
    , label_not_ends_with : OptionalArgument String
    , pages_every : OptionalArgument PageWhereInput
    , pages_some : OptionalArgument PageWhereInput
    , pages_none : OptionalArgument PageWhereInput
    }


{-| Type for the CallToActionWhereInput input object.
-}
type CallToActionWhereInput
    = CallToActionWhereInput CallToActionWhereInputRaw


{-| Encode a CallToActionWhereInput into a value that can be used as an argument.
-}
encodeCallToActionWhereInput : CallToActionWhereInput -> Value
encodeCallToActionWhereInput (CallToActionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeCallToActionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeCallToActionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeCallToActionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "placement", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement ), ( "placement_not", Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.optional input.placement_not ), ( "placement_in", (Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.list) |> Encode.optional input.placement_in ), ( "placement_not_in", (Encode.enum CMS.Enum.CallToActionPlacement.toString |> Encode.list) |> Encode.optional input.placement_not_in ), ( "actionUrl", Encode.string |> Encode.optional input.actionUrl ), ( "actionUrl_not", Encode.string |> Encode.optional input.actionUrl_not ), ( "actionUrl_in", (Encode.string |> Encode.list) |> Encode.optional input.actionUrl_in ), ( "actionUrl_not_in", (Encode.string |> Encode.list) |> Encode.optional input.actionUrl_not_in ), ( "actionUrl_lt", Encode.string |> Encode.optional input.actionUrl_lt ), ( "actionUrl_lte", Encode.string |> Encode.optional input.actionUrl_lte ), ( "actionUrl_gt", Encode.string |> Encode.optional input.actionUrl_gt ), ( "actionUrl_gte", Encode.string |> Encode.optional input.actionUrl_gte ), ( "actionUrl_contains", Encode.string |> Encode.optional input.actionUrl_contains ), ( "actionUrl_not_contains", Encode.string |> Encode.optional input.actionUrl_not_contains ), ( "actionUrl_starts_with", Encode.string |> Encode.optional input.actionUrl_starts_with ), ( "actionUrl_not_starts_with", Encode.string |> Encode.optional input.actionUrl_not_starts_with ), ( "actionUrl_ends_with", Encode.string |> Encode.optional input.actionUrl_ends_with ), ( "actionUrl_not_ends_with", Encode.string |> Encode.optional input.actionUrl_not_ends_with ), ( "label", Encode.string |> Encode.optional input.label ), ( "label_not", Encode.string |> Encode.optional input.label_not ), ( "label_in", (Encode.string |> Encode.list) |> Encode.optional input.label_in ), ( "label_not_in", (Encode.string |> Encode.list) |> Encode.optional input.label_not_in ), ( "label_lt", Encode.string |> Encode.optional input.label_lt ), ( "label_lte", Encode.string |> Encode.optional input.label_lte ), ( "label_gt", Encode.string |> Encode.optional input.label_gt ), ( "label_gte", Encode.string |> Encode.optional input.label_gte ), ( "label_contains", Encode.string |> Encode.optional input.label_contains ), ( "label_not_contains", Encode.string |> Encode.optional input.label_not_contains ), ( "label_starts_with", Encode.string |> Encode.optional input.label_starts_with ), ( "label_not_starts_with", Encode.string |> Encode.optional input.label_not_starts_with ), ( "label_ends_with", Encode.string |> Encode.optional input.label_ends_with ), ( "label_not_ends_with", Encode.string |> Encode.optional input.label_not_ends_with ), ( "pages_every", encodePageWhereInput |> Encode.optional input.pages_every ), ( "pages_some", encodePageWhereInput |> Encode.optional input.pages_some ), ( "pages_none", encodePageWhereInput |> Encode.optional input.pages_none ) ]


buildCallToActionWhereUniqueInput : (CallToActionWhereUniqueInputOptionalFields -> CallToActionWhereUniqueInputOptionalFields) -> CallToActionWhereUniqueInput
buildCallToActionWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias CallToActionWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Type for the CallToActionWhereUniqueInput input object.
-}
type alias CallToActionWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Encode a CallToActionWhereUniqueInput into a value that can be used as an argument.
-}
encodeCallToActionWhereUniqueInput : CallToActionWhereUniqueInput -> Value
encodeCallToActionWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildColorSubscriptionWhereInput : (ColorSubscriptionWhereInputOptionalFields -> ColorSubscriptionWhereInputOptionalFields) -> ColorSubscriptionWhereInput
buildColorSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ColorSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ColorSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ColorSubscriptionWhereInput)
    , or : OptionalArgument (List ColorSubscriptionWhereInput)
    , not : OptionalArgument (List ColorSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ColorWhereInput
    }


{-| Type alias for the `ColorSubscriptionWhereInput` attributes. Note that this type
needs to use the `ColorSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ColorSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ColorSubscriptionWhereInput)
    , or : OptionalArgument (List ColorSubscriptionWhereInput)
    , not : OptionalArgument (List ColorSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ColorWhereInput
    }


{-| Type for the ColorSubscriptionWhereInput input object.
-}
type ColorSubscriptionWhereInput
    = ColorSubscriptionWhereInput ColorSubscriptionWhereInputRaw


{-| Encode a ColorSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeColorSubscriptionWhereInput : ColorSubscriptionWhereInput -> Value
encodeColorSubscriptionWhereInput (ColorSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeColorWhereInput |> Encode.optional input.node ) ]


buildColorWhereInput : (ColorWhereInputOptionalFields -> ColorWhereInputOptionalFields) -> ColorWhereInput
buildColorWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent }
    in
    ColorWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte }


type alias ColorWhereInputOptionalFields =
    { and : OptionalArgument (List ColorWhereInput)
    , or : OptionalArgument (List ColorWhereInput)
    , not : OptionalArgument (List ColorWhereInput)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    }


{-| Type alias for the `ColorWhereInput` attributes. Note that this type
needs to use the `ColorWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ColorWhereInputRaw =
    { and : OptionalArgument (List ColorWhereInput)
    , or : OptionalArgument (List ColorWhereInput)
    , not : OptionalArgument (List ColorWhereInput)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    }


{-| Type for the ColorWhereInput input object.
-}
type ColorWhereInput
    = ColorWhereInput ColorWhereInputRaw


{-| Encode a ColorWhereInput into a value that can be used as an argument.
-}
encodeColorWhereInput : ColorWhereInput -> Value
encodeColorWhereInput (ColorWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ) ]


buildColorWhereUniqueInput : (ColorWhereUniqueInputOptionalFields -> ColorWhereUniqueInputOptionalFields) -> ColorWhereUniqueInput
buildColorWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ColorWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Type for the ColorWhereUniqueInput input object.
-}
type alias ColorWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Encode a ColorWhereUniqueInput into a value that can be used as an argument.
-}
encodeColorWhereUniqueInput : ColorWhereUniqueInput -> Value
encodeColorWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildDocumentOutputInput : (DocumentOutputInputOptionalFields -> DocumentOutputInputOptionalFields) -> DocumentOutputInput
buildDocumentOutputInput fillOptionals =
    let
        optionals =
            fillOptionals
                { format = Absent }
    in
    { format = optionals.format }


type alias DocumentOutputInputOptionalFields =
    { format : OptionalArgument CMS.Enum.DocumentFileTypes.DocumentFileTypes }


{-| Type for the DocumentOutputInput input object.
-}
type alias DocumentOutputInput =
    { format : OptionalArgument CMS.Enum.DocumentFileTypes.DocumentFileTypes }


{-| Encode a DocumentOutputInput into a value that can be used as an argument.
-}
encodeDocumentOutputInput : DocumentOutputInput -> Value
encodeDocumentOutputInput input =
    Encode.maybeObject
        [ ( "format", Encode.enum CMS.Enum.DocumentFileTypes.toString |> Encode.optional input.format ) ]


buildDocumentTransformationInput : (DocumentTransformationInputOptionalFields -> DocumentTransformationInputOptionalFields) -> DocumentTransformationInput
buildDocumentTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { output = Absent }
    in
    { output = optionals.output }


type alias DocumentTransformationInputOptionalFields =
    { output : OptionalArgument DocumentOutputInput }


{-| Type for the DocumentTransformationInput input object.
-}
type alias DocumentTransformationInput =
    { output : OptionalArgument DocumentOutputInput }


{-| Encode a DocumentTransformationInput into a value that can be used as an argument.
-}
encodeDocumentTransformationInput : DocumentTransformationInput -> Value
encodeDocumentTransformationInput input =
    Encode.maybeObject
        [ ( "output", encodeDocumentOutputInput |> Encode.optional input.output ) ]


buildExplanationBlockCreateInput : ExplanationBlockCreateInputRequiredFields -> (ExplanationBlockCreateInputOptionalFields -> ExplanationBlockCreateInputOptionalFields) -> ExplanationBlockCreateInput
buildExplanationBlockCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, text = Absent, icon = Absent }
    in
    { status = optionals.status, title = optionals.title, text = optionals.text, type_ = required.type_, icon = optionals.icon }


type alias ExplanationBlockCreateInputRequiredFields =
    { type_ : CMS.Enum.ExplanationTypes.ExplanationTypes }


type alias ExplanationBlockCreateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , text : OptionalArgument String
    , icon : OptionalArgument String
    }


{-| Type for the ExplanationBlockCreateInput input object.
-}
type alias ExplanationBlockCreateInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , text : OptionalArgument String
    , type_ : CMS.Enum.ExplanationTypes.ExplanationTypes
    , icon : OptionalArgument String
    }


{-| Encode a ExplanationBlockCreateInput into a value that can be used as an argument.
-}
encodeExplanationBlockCreateInput : ExplanationBlockCreateInput -> Value
encodeExplanationBlockCreateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "text", Encode.string |> Encode.optional input.text ), ( "type", Encode.enum CMS.Enum.ExplanationTypes.toString input.type_ |> Just ), ( "icon", Encode.string |> Encode.optional input.icon ) ]


buildExplanationBlockSubscriptionWhereInput : (ExplanationBlockSubscriptionWhereInputOptionalFields -> ExplanationBlockSubscriptionWhereInputOptionalFields) -> ExplanationBlockSubscriptionWhereInput
buildExplanationBlockSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ExplanationBlockSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ExplanationBlockSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ExplanationBlockSubscriptionWhereInput)
    , or : OptionalArgument (List ExplanationBlockSubscriptionWhereInput)
    , not : OptionalArgument (List ExplanationBlockSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ExplanationBlockWhereInput
    }


{-| Type alias for the `ExplanationBlockSubscriptionWhereInput` attributes. Note that this type
needs to use the `ExplanationBlockSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ExplanationBlockSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ExplanationBlockSubscriptionWhereInput)
    , or : OptionalArgument (List ExplanationBlockSubscriptionWhereInput)
    , not : OptionalArgument (List ExplanationBlockSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ExplanationBlockWhereInput
    }


{-| Type for the ExplanationBlockSubscriptionWhereInput input object.
-}
type ExplanationBlockSubscriptionWhereInput
    = ExplanationBlockSubscriptionWhereInput ExplanationBlockSubscriptionWhereInputRaw


{-| Encode a ExplanationBlockSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeExplanationBlockSubscriptionWhereInput : ExplanationBlockSubscriptionWhereInput -> Value
encodeExplanationBlockSubscriptionWhereInput (ExplanationBlockSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeExplanationBlockSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeExplanationBlockSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeExplanationBlockSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeExplanationBlockWhereInput |> Encode.optional input.node ) ]


buildExplanationBlockUpdateInput : (ExplanationBlockUpdateInputOptionalFields -> ExplanationBlockUpdateInputOptionalFields) -> ExplanationBlockUpdateInput
buildExplanationBlockUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, text = Absent, type_ = Absent, icon = Absent }
    in
    { status = optionals.status, title = optionals.title, text = optionals.text, type_ = optionals.type_, icon = optionals.icon }


type alias ExplanationBlockUpdateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , text : OptionalArgument String
    , type_ : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , icon : OptionalArgument String
    }


{-| Type for the ExplanationBlockUpdateInput input object.
-}
type alias ExplanationBlockUpdateInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , text : OptionalArgument String
    , type_ : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , icon : OptionalArgument String
    }


{-| Encode a ExplanationBlockUpdateInput into a value that can be used as an argument.
-}
encodeExplanationBlockUpdateInput : ExplanationBlockUpdateInput -> Value
encodeExplanationBlockUpdateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "text", Encode.string |> Encode.optional input.text ), ( "type", Encode.enum CMS.Enum.ExplanationTypes.toString |> Encode.optional input.type_ ), ( "icon", Encode.string |> Encode.optional input.icon ) ]


buildExplanationBlockUpdateManyMutationInput : (ExplanationBlockUpdateManyMutationInputOptionalFields -> ExplanationBlockUpdateManyMutationInputOptionalFields) -> ExplanationBlockUpdateManyMutationInput
buildExplanationBlockUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, text = Absent, type_ = Absent, icon = Absent }
    in
    { status = optionals.status, title = optionals.title, text = optionals.text, type_ = optionals.type_, icon = optionals.icon }


type alias ExplanationBlockUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , text : OptionalArgument String
    , type_ : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , icon : OptionalArgument String
    }


{-| Type for the ExplanationBlockUpdateManyMutationInput input object.
-}
type alias ExplanationBlockUpdateManyMutationInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , text : OptionalArgument String
    , type_ : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , icon : OptionalArgument String
    }


{-| Encode a ExplanationBlockUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeExplanationBlockUpdateManyMutationInput : ExplanationBlockUpdateManyMutationInput -> Value
encodeExplanationBlockUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "text", Encode.string |> Encode.optional input.text ), ( "type", Encode.enum CMS.Enum.ExplanationTypes.toString |> Encode.optional input.type_ ), ( "icon", Encode.string |> Encode.optional input.icon ) ]


buildExplanationBlockWhereInput : (ExplanationBlockWhereInputOptionalFields -> ExplanationBlockWhereInputOptionalFields) -> ExplanationBlockWhereInput
buildExplanationBlockWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, text = Absent, text_not = Absent, text_in = Absent, text_not_in = Absent, text_lt = Absent, text_lte = Absent, text_gt = Absent, text_gte = Absent, text_contains = Absent, text_not_contains = Absent, text_starts_with = Absent, text_not_starts_with = Absent, text_ends_with = Absent, text_not_ends_with = Absent, type_ = Absent, type_not = Absent, type_in = Absent, type_not_in = Absent, icon = Absent, icon_not = Absent, icon_in = Absent, icon_not_in = Absent, icon_lt = Absent, icon_lte = Absent, icon_gt = Absent, icon_gte = Absent, icon_contains = Absent, icon_not_contains = Absent, icon_starts_with = Absent, icon_not_starts_with = Absent, icon_ends_with = Absent, icon_not_ends_with = Absent }
    in
    ExplanationBlockWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, text = optionals.text, text_not = optionals.text_not, text_in = optionals.text_in, text_not_in = optionals.text_not_in, text_lt = optionals.text_lt, text_lte = optionals.text_lte, text_gt = optionals.text_gt, text_gte = optionals.text_gte, text_contains = optionals.text_contains, text_not_contains = optionals.text_not_contains, text_starts_with = optionals.text_starts_with, text_not_starts_with = optionals.text_not_starts_with, text_ends_with = optionals.text_ends_with, text_not_ends_with = optionals.text_not_ends_with, type_ = optionals.type_, type_not = optionals.type_not, type_in = optionals.type_in, type_not_in = optionals.type_not_in, icon = optionals.icon, icon_not = optionals.icon_not, icon_in = optionals.icon_in, icon_not_in = optionals.icon_not_in, icon_lt = optionals.icon_lt, icon_lte = optionals.icon_lte, icon_gt = optionals.icon_gt, icon_gte = optionals.icon_gte, icon_contains = optionals.icon_contains, icon_not_contains = optionals.icon_not_contains, icon_starts_with = optionals.icon_starts_with, icon_not_starts_with = optionals.icon_not_starts_with, icon_ends_with = optionals.icon_ends_with, icon_not_ends_with = optionals.icon_not_ends_with }


type alias ExplanationBlockWhereInputOptionalFields =
    { and : OptionalArgument (List ExplanationBlockWhereInput)
    , or : OptionalArgument (List ExplanationBlockWhereInput)
    , not : OptionalArgument (List ExplanationBlockWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , text : OptionalArgument String
    , text_not : OptionalArgument String
    , text_in : OptionalArgument (List String)
    , text_not_in : OptionalArgument (List String)
    , text_lt : OptionalArgument String
    , text_lte : OptionalArgument String
    , text_gt : OptionalArgument String
    , text_gte : OptionalArgument String
    , text_contains : OptionalArgument String
    , text_not_contains : OptionalArgument String
    , text_starts_with : OptionalArgument String
    , text_not_starts_with : OptionalArgument String
    , text_ends_with : OptionalArgument String
    , text_not_ends_with : OptionalArgument String
    , type_ : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , type_not : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , type_in : OptionalArgument (List CMS.Enum.ExplanationTypes.ExplanationTypes)
    , type_not_in : OptionalArgument (List CMS.Enum.ExplanationTypes.ExplanationTypes)
    , icon : OptionalArgument String
    , icon_not : OptionalArgument String
    , icon_in : OptionalArgument (List String)
    , icon_not_in : OptionalArgument (List String)
    , icon_lt : OptionalArgument String
    , icon_lte : OptionalArgument String
    , icon_gt : OptionalArgument String
    , icon_gte : OptionalArgument String
    , icon_contains : OptionalArgument String
    , icon_not_contains : OptionalArgument String
    , icon_starts_with : OptionalArgument String
    , icon_not_starts_with : OptionalArgument String
    , icon_ends_with : OptionalArgument String
    , icon_not_ends_with : OptionalArgument String
    }


{-| Type alias for the `ExplanationBlockWhereInput` attributes. Note that this type
needs to use the `ExplanationBlockWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ExplanationBlockWhereInputRaw =
    { and : OptionalArgument (List ExplanationBlockWhereInput)
    , or : OptionalArgument (List ExplanationBlockWhereInput)
    , not : OptionalArgument (List ExplanationBlockWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , text : OptionalArgument String
    , text_not : OptionalArgument String
    , text_in : OptionalArgument (List String)
    , text_not_in : OptionalArgument (List String)
    , text_lt : OptionalArgument String
    , text_lte : OptionalArgument String
    , text_gt : OptionalArgument String
    , text_gte : OptionalArgument String
    , text_contains : OptionalArgument String
    , text_not_contains : OptionalArgument String
    , text_starts_with : OptionalArgument String
    , text_not_starts_with : OptionalArgument String
    , text_ends_with : OptionalArgument String
    , text_not_ends_with : OptionalArgument String
    , type_ : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , type_not : OptionalArgument CMS.Enum.ExplanationTypes.ExplanationTypes
    , type_in : OptionalArgument (List CMS.Enum.ExplanationTypes.ExplanationTypes)
    , type_not_in : OptionalArgument (List CMS.Enum.ExplanationTypes.ExplanationTypes)
    , icon : OptionalArgument String
    , icon_not : OptionalArgument String
    , icon_in : OptionalArgument (List String)
    , icon_not_in : OptionalArgument (List String)
    , icon_lt : OptionalArgument String
    , icon_lte : OptionalArgument String
    , icon_gt : OptionalArgument String
    , icon_gte : OptionalArgument String
    , icon_contains : OptionalArgument String
    , icon_not_contains : OptionalArgument String
    , icon_starts_with : OptionalArgument String
    , icon_not_starts_with : OptionalArgument String
    , icon_ends_with : OptionalArgument String
    , icon_not_ends_with : OptionalArgument String
    }


{-| Type for the ExplanationBlockWhereInput input object.
-}
type ExplanationBlockWhereInput
    = ExplanationBlockWhereInput ExplanationBlockWhereInputRaw


{-| Encode a ExplanationBlockWhereInput into a value that can be used as an argument.
-}
encodeExplanationBlockWhereInput : ExplanationBlockWhereInput -> Value
encodeExplanationBlockWhereInput (ExplanationBlockWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeExplanationBlockWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeExplanationBlockWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeExplanationBlockWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "text", Encode.string |> Encode.optional input.text ), ( "text_not", Encode.string |> Encode.optional input.text_not ), ( "text_in", (Encode.string |> Encode.list) |> Encode.optional input.text_in ), ( "text_not_in", (Encode.string |> Encode.list) |> Encode.optional input.text_not_in ), ( "text_lt", Encode.string |> Encode.optional input.text_lt ), ( "text_lte", Encode.string |> Encode.optional input.text_lte ), ( "text_gt", Encode.string |> Encode.optional input.text_gt ), ( "text_gte", Encode.string |> Encode.optional input.text_gte ), ( "text_contains", Encode.string |> Encode.optional input.text_contains ), ( "text_not_contains", Encode.string |> Encode.optional input.text_not_contains ), ( "text_starts_with", Encode.string |> Encode.optional input.text_starts_with ), ( "text_not_starts_with", Encode.string |> Encode.optional input.text_not_starts_with ), ( "text_ends_with", Encode.string |> Encode.optional input.text_ends_with ), ( "text_not_ends_with", Encode.string |> Encode.optional input.text_not_ends_with ), ( "type", Encode.enum CMS.Enum.ExplanationTypes.toString |> Encode.optional input.type_ ), ( "type_not", Encode.enum CMS.Enum.ExplanationTypes.toString |> Encode.optional input.type_not ), ( "type_in", (Encode.enum CMS.Enum.ExplanationTypes.toString |> Encode.list) |> Encode.optional input.type_in ), ( "type_not_in", (Encode.enum CMS.Enum.ExplanationTypes.toString |> Encode.list) |> Encode.optional input.type_not_in ), ( "icon", Encode.string |> Encode.optional input.icon ), ( "icon_not", Encode.string |> Encode.optional input.icon_not ), ( "icon_in", (Encode.string |> Encode.list) |> Encode.optional input.icon_in ), ( "icon_not_in", (Encode.string |> Encode.list) |> Encode.optional input.icon_not_in ), ( "icon_lt", Encode.string |> Encode.optional input.icon_lt ), ( "icon_lte", Encode.string |> Encode.optional input.icon_lte ), ( "icon_gt", Encode.string |> Encode.optional input.icon_gt ), ( "icon_gte", Encode.string |> Encode.optional input.icon_gte ), ( "icon_contains", Encode.string |> Encode.optional input.icon_contains ), ( "icon_not_contains", Encode.string |> Encode.optional input.icon_not_contains ), ( "icon_starts_with", Encode.string |> Encode.optional input.icon_starts_with ), ( "icon_not_starts_with", Encode.string |> Encode.optional input.icon_not_starts_with ), ( "icon_ends_with", Encode.string |> Encode.optional input.icon_ends_with ), ( "icon_not_ends_with", Encode.string |> Encode.optional input.icon_not_ends_with ) ]


buildExplanationBlockWhereUniqueInput : (ExplanationBlockWhereUniqueInputOptionalFields -> ExplanationBlockWhereUniqueInputOptionalFields) -> ExplanationBlockWhereUniqueInput
buildExplanationBlockWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ExplanationBlockWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Type for the ExplanationBlockWhereUniqueInput input object.
-}
type alias ExplanationBlockWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Encode a ExplanationBlockWhereUniqueInput into a value that can be used as an argument.
-}
encodeExplanationBlockWhereUniqueInput : ExplanationBlockWhereUniqueInput -> Value
encodeExplanationBlockWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildFaqCreateInput : (FaqCreateInputOptionalFields -> FaqCreateInputOptionalFields) -> FaqCreateInput
buildFaqCreateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, question = Absent, answer = Absent, sort = Absent }
    in
    { status = optionals.status, question = optionals.question, answer = optionals.answer, sort = optionals.sort }


type alias FaqCreateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , question : OptionalArgument String
    , answer : OptionalArgument String
    , sort : OptionalArgument Int
    }


{-| Type for the FaqCreateInput input object.
-}
type alias FaqCreateInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , question : OptionalArgument String
    , answer : OptionalArgument String
    , sort : OptionalArgument Int
    }


{-| Encode a FaqCreateInput into a value that can be used as an argument.
-}
encodeFaqCreateInput : FaqCreateInput -> Value
encodeFaqCreateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "question", Encode.string |> Encode.optional input.question ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "sort", Encode.int |> Encode.optional input.sort ) ]


buildFaqSubscriptionWhereInput : (FaqSubscriptionWhereInputOptionalFields -> FaqSubscriptionWhereInputOptionalFields) -> FaqSubscriptionWhereInput
buildFaqSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    FaqSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias FaqSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List FaqSubscriptionWhereInput)
    , or : OptionalArgument (List FaqSubscriptionWhereInput)
    , not : OptionalArgument (List FaqSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument FaqWhereInput
    }


{-| Type alias for the `FaqSubscriptionWhereInput` attributes. Note that this type
needs to use the `FaqSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias FaqSubscriptionWhereInputRaw =
    { and : OptionalArgument (List FaqSubscriptionWhereInput)
    , or : OptionalArgument (List FaqSubscriptionWhereInput)
    , not : OptionalArgument (List FaqSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument FaqWhereInput
    }


{-| Type for the FaqSubscriptionWhereInput input object.
-}
type FaqSubscriptionWhereInput
    = FaqSubscriptionWhereInput FaqSubscriptionWhereInputRaw


{-| Encode a FaqSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeFaqSubscriptionWhereInput : FaqSubscriptionWhereInput -> Value
encodeFaqSubscriptionWhereInput (FaqSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeFaqSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeFaqSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeFaqSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeFaqWhereInput |> Encode.optional input.node ) ]


buildFaqUpdateInput : (FaqUpdateInputOptionalFields -> FaqUpdateInputOptionalFields) -> FaqUpdateInput
buildFaqUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, question = Absent, answer = Absent, sort = Absent }
    in
    { status = optionals.status, question = optionals.question, answer = optionals.answer, sort = optionals.sort }


type alias FaqUpdateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , question : OptionalArgument String
    , answer : OptionalArgument String
    , sort : OptionalArgument Int
    }


{-| Type for the FaqUpdateInput input object.
-}
type alias FaqUpdateInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , question : OptionalArgument String
    , answer : OptionalArgument String
    , sort : OptionalArgument Int
    }


{-| Encode a FaqUpdateInput into a value that can be used as an argument.
-}
encodeFaqUpdateInput : FaqUpdateInput -> Value
encodeFaqUpdateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "question", Encode.string |> Encode.optional input.question ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "sort", Encode.int |> Encode.optional input.sort ) ]


buildFaqUpdateManyMutationInput : (FaqUpdateManyMutationInputOptionalFields -> FaqUpdateManyMutationInputOptionalFields) -> FaqUpdateManyMutationInput
buildFaqUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, question = Absent, answer = Absent, sort = Absent }
    in
    { status = optionals.status, question = optionals.question, answer = optionals.answer, sort = optionals.sort }


type alias FaqUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , question : OptionalArgument String
    , answer : OptionalArgument String
    , sort : OptionalArgument Int
    }


{-| Type for the FaqUpdateManyMutationInput input object.
-}
type alias FaqUpdateManyMutationInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , question : OptionalArgument String
    , answer : OptionalArgument String
    , sort : OptionalArgument Int
    }


{-| Encode a FaqUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeFaqUpdateManyMutationInput : FaqUpdateManyMutationInput -> Value
encodeFaqUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "question", Encode.string |> Encode.optional input.question ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "sort", Encode.int |> Encode.optional input.sort ) ]


buildFaqWhereInput : (FaqWhereInputOptionalFields -> FaqWhereInputOptionalFields) -> FaqWhereInput
buildFaqWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, question = Absent, question_not = Absent, question_in = Absent, question_not_in = Absent, question_lt = Absent, question_lte = Absent, question_gt = Absent, question_gte = Absent, question_contains = Absent, question_not_contains = Absent, question_starts_with = Absent, question_not_starts_with = Absent, question_ends_with = Absent, question_not_ends_with = Absent, answer = Absent, answer_not = Absent, answer_in = Absent, answer_not_in = Absent, answer_lt = Absent, answer_lte = Absent, answer_gt = Absent, answer_gte = Absent, answer_contains = Absent, answer_not_contains = Absent, answer_starts_with = Absent, answer_not_starts_with = Absent, answer_ends_with = Absent, answer_not_ends_with = Absent, sort = Absent, sort_not = Absent, sort_in = Absent, sort_not_in = Absent, sort_lt = Absent, sort_lte = Absent, sort_gt = Absent, sort_gte = Absent }
    in
    FaqWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, question = optionals.question, question_not = optionals.question_not, question_in = optionals.question_in, question_not_in = optionals.question_not_in, question_lt = optionals.question_lt, question_lte = optionals.question_lte, question_gt = optionals.question_gt, question_gte = optionals.question_gte, question_contains = optionals.question_contains, question_not_contains = optionals.question_not_contains, question_starts_with = optionals.question_starts_with, question_not_starts_with = optionals.question_not_starts_with, question_ends_with = optionals.question_ends_with, question_not_ends_with = optionals.question_not_ends_with, answer = optionals.answer, answer_not = optionals.answer_not, answer_in = optionals.answer_in, answer_not_in = optionals.answer_not_in, answer_lt = optionals.answer_lt, answer_lte = optionals.answer_lte, answer_gt = optionals.answer_gt, answer_gte = optionals.answer_gte, answer_contains = optionals.answer_contains, answer_not_contains = optionals.answer_not_contains, answer_starts_with = optionals.answer_starts_with, answer_not_starts_with = optionals.answer_not_starts_with, answer_ends_with = optionals.answer_ends_with, answer_not_ends_with = optionals.answer_not_ends_with, sort = optionals.sort, sort_not = optionals.sort_not, sort_in = optionals.sort_in, sort_not_in = optionals.sort_not_in, sort_lt = optionals.sort_lt, sort_lte = optionals.sort_lte, sort_gt = optionals.sort_gt, sort_gte = optionals.sort_gte }


type alias FaqWhereInputOptionalFields =
    { and : OptionalArgument (List FaqWhereInput)
    , or : OptionalArgument (List FaqWhereInput)
    , not : OptionalArgument (List FaqWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , question : OptionalArgument String
    , question_not : OptionalArgument String
    , question_in : OptionalArgument (List String)
    , question_not_in : OptionalArgument (List String)
    , question_lt : OptionalArgument String
    , question_lte : OptionalArgument String
    , question_gt : OptionalArgument String
    , question_gte : OptionalArgument String
    , question_contains : OptionalArgument String
    , question_not_contains : OptionalArgument String
    , question_starts_with : OptionalArgument String
    , question_not_starts_with : OptionalArgument String
    , question_ends_with : OptionalArgument String
    , question_not_ends_with : OptionalArgument String
    , answer : OptionalArgument String
    , answer_not : OptionalArgument String
    , answer_in : OptionalArgument (List String)
    , answer_not_in : OptionalArgument (List String)
    , answer_lt : OptionalArgument String
    , answer_lte : OptionalArgument String
    , answer_gt : OptionalArgument String
    , answer_gte : OptionalArgument String
    , answer_contains : OptionalArgument String
    , answer_not_contains : OptionalArgument String
    , answer_starts_with : OptionalArgument String
    , answer_not_starts_with : OptionalArgument String
    , answer_ends_with : OptionalArgument String
    , answer_not_ends_with : OptionalArgument String
    , sort : OptionalArgument Int
    , sort_not : OptionalArgument Int
    , sort_in : OptionalArgument (List Int)
    , sort_not_in : OptionalArgument (List Int)
    , sort_lt : OptionalArgument Int
    , sort_lte : OptionalArgument Int
    , sort_gt : OptionalArgument Int
    , sort_gte : OptionalArgument Int
    }


{-| Type alias for the `FaqWhereInput` attributes. Note that this type
needs to use the `FaqWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias FaqWhereInputRaw =
    { and : OptionalArgument (List FaqWhereInput)
    , or : OptionalArgument (List FaqWhereInput)
    , not : OptionalArgument (List FaqWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , question : OptionalArgument String
    , question_not : OptionalArgument String
    , question_in : OptionalArgument (List String)
    , question_not_in : OptionalArgument (List String)
    , question_lt : OptionalArgument String
    , question_lte : OptionalArgument String
    , question_gt : OptionalArgument String
    , question_gte : OptionalArgument String
    , question_contains : OptionalArgument String
    , question_not_contains : OptionalArgument String
    , question_starts_with : OptionalArgument String
    , question_not_starts_with : OptionalArgument String
    , question_ends_with : OptionalArgument String
    , question_not_ends_with : OptionalArgument String
    , answer : OptionalArgument String
    , answer_not : OptionalArgument String
    , answer_in : OptionalArgument (List String)
    , answer_not_in : OptionalArgument (List String)
    , answer_lt : OptionalArgument String
    , answer_lte : OptionalArgument String
    , answer_gt : OptionalArgument String
    , answer_gte : OptionalArgument String
    , answer_contains : OptionalArgument String
    , answer_not_contains : OptionalArgument String
    , answer_starts_with : OptionalArgument String
    , answer_not_starts_with : OptionalArgument String
    , answer_ends_with : OptionalArgument String
    , answer_not_ends_with : OptionalArgument String
    , sort : OptionalArgument Int
    , sort_not : OptionalArgument Int
    , sort_in : OptionalArgument (List Int)
    , sort_not_in : OptionalArgument (List Int)
    , sort_lt : OptionalArgument Int
    , sort_lte : OptionalArgument Int
    , sort_gt : OptionalArgument Int
    , sort_gte : OptionalArgument Int
    }


{-| Type for the FaqWhereInput input object.
-}
type FaqWhereInput
    = FaqWhereInput FaqWhereInputRaw


{-| Encode a FaqWhereInput into a value that can be used as an argument.
-}
encodeFaqWhereInput : FaqWhereInput -> Value
encodeFaqWhereInput (FaqWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeFaqWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeFaqWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeFaqWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "question", Encode.string |> Encode.optional input.question ), ( "question_not", Encode.string |> Encode.optional input.question_not ), ( "question_in", (Encode.string |> Encode.list) |> Encode.optional input.question_in ), ( "question_not_in", (Encode.string |> Encode.list) |> Encode.optional input.question_not_in ), ( "question_lt", Encode.string |> Encode.optional input.question_lt ), ( "question_lte", Encode.string |> Encode.optional input.question_lte ), ( "question_gt", Encode.string |> Encode.optional input.question_gt ), ( "question_gte", Encode.string |> Encode.optional input.question_gte ), ( "question_contains", Encode.string |> Encode.optional input.question_contains ), ( "question_not_contains", Encode.string |> Encode.optional input.question_not_contains ), ( "question_starts_with", Encode.string |> Encode.optional input.question_starts_with ), ( "question_not_starts_with", Encode.string |> Encode.optional input.question_not_starts_with ), ( "question_ends_with", Encode.string |> Encode.optional input.question_ends_with ), ( "question_not_ends_with", Encode.string |> Encode.optional input.question_not_ends_with ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "answer_not", Encode.string |> Encode.optional input.answer_not ), ( "answer_in", (Encode.string |> Encode.list) |> Encode.optional input.answer_in ), ( "answer_not_in", (Encode.string |> Encode.list) |> Encode.optional input.answer_not_in ), ( "answer_lt", Encode.string |> Encode.optional input.answer_lt ), ( "answer_lte", Encode.string |> Encode.optional input.answer_lte ), ( "answer_gt", Encode.string |> Encode.optional input.answer_gt ), ( "answer_gte", Encode.string |> Encode.optional input.answer_gte ), ( "answer_contains", Encode.string |> Encode.optional input.answer_contains ), ( "answer_not_contains", Encode.string |> Encode.optional input.answer_not_contains ), ( "answer_starts_with", Encode.string |> Encode.optional input.answer_starts_with ), ( "answer_not_starts_with", Encode.string |> Encode.optional input.answer_not_starts_with ), ( "answer_ends_with", Encode.string |> Encode.optional input.answer_ends_with ), ( "answer_not_ends_with", Encode.string |> Encode.optional input.answer_not_ends_with ), ( "sort", Encode.int |> Encode.optional input.sort ), ( "sort_not", Encode.int |> Encode.optional input.sort_not ), ( "sort_in", (Encode.int |> Encode.list) |> Encode.optional input.sort_in ), ( "sort_not_in", (Encode.int |> Encode.list) |> Encode.optional input.sort_not_in ), ( "sort_lt", Encode.int |> Encode.optional input.sort_lt ), ( "sort_lte", Encode.int |> Encode.optional input.sort_lte ), ( "sort_gt", Encode.int |> Encode.optional input.sort_gt ), ( "sort_gte", Encode.int |> Encode.optional input.sort_gte ) ]


buildFaqWhereUniqueInput : (FaqWhereUniqueInputOptionalFields -> FaqWhereUniqueInputOptionalFields) -> FaqWhereUniqueInput
buildFaqWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, sort = Absent }
    in
    { id = optionals.id, sort = optionals.sort }


type alias FaqWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id
    , sort : OptionalArgument Int
    }


{-| Type for the FaqWhereUniqueInput input object.
-}
type alias FaqWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id
    , sort : OptionalArgument Int
    }


{-| Encode a FaqWhereUniqueInput into a value that can be used as an argument.
-}
encodeFaqWhereUniqueInput : FaqWhereUniqueInput -> Value
encodeFaqWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "sort", Encode.int |> Encode.optional input.sort ) ]


buildImageResizeInput : (ImageResizeInputOptionalFields -> ImageResizeInputOptionalFields) -> ImageResizeInput
buildImageResizeInput fillOptionals =
    let
        optionals =
            fillOptionals
                { width = Absent, height = Absent, fit = Absent }
    in
    { width = optionals.width, height = optionals.height, fit = optionals.fit }


type alias ImageResizeInputOptionalFields =
    { width : OptionalArgument Int
    , height : OptionalArgument Int
    , fit : OptionalArgument CMS.Enum.ImageFit.ImageFit
    }


{-| Type for the ImageResizeInput input object.
-}
type alias ImageResizeInput =
    { width : OptionalArgument Int
    , height : OptionalArgument Int
    , fit : OptionalArgument CMS.Enum.ImageFit.ImageFit
    }


{-| Encode a ImageResizeInput into a value that can be used as an argument.
-}
encodeImageResizeInput : ImageResizeInput -> Value
encodeImageResizeInput input =
    Encode.maybeObject
        [ ( "width", Encode.int |> Encode.optional input.width ), ( "height", Encode.int |> Encode.optional input.height ), ( "fit", Encode.enum CMS.Enum.ImageFit.toString |> Encode.optional input.fit ) ]


buildImageTransformationInput : (ImageTransformationInputOptionalFields -> ImageTransformationInputOptionalFields) -> ImageTransformationInput
buildImageTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { resize = Absent }
    in
    { resize = optionals.resize }


type alias ImageTransformationInputOptionalFields =
    { resize : OptionalArgument ImageResizeInput }


{-| Type for the ImageTransformationInput input object.
-}
type alias ImageTransformationInput =
    { resize : OptionalArgument ImageResizeInput }


{-| Encode a ImageTransformationInput into a value that can be used as an argument.
-}
encodeImageTransformationInput : ImageTransformationInput -> Value
encodeImageTransformationInput input =
    Encode.maybeObject
        [ ( "resize", encodeImageResizeInput |> Encode.optional input.resize ) ]


buildLocationSubscriptionWhereInput : (LocationSubscriptionWhereInputOptionalFields -> LocationSubscriptionWhereInputOptionalFields) -> LocationSubscriptionWhereInput
buildLocationSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    LocationSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias LocationSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List LocationSubscriptionWhereInput)
    , or : OptionalArgument (List LocationSubscriptionWhereInput)
    , not : OptionalArgument (List LocationSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument LocationWhereInput
    }


{-| Type alias for the `LocationSubscriptionWhereInput` attributes. Note that this type
needs to use the `LocationSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias LocationSubscriptionWhereInputRaw =
    { and : OptionalArgument (List LocationSubscriptionWhereInput)
    , or : OptionalArgument (List LocationSubscriptionWhereInput)
    , not : OptionalArgument (List LocationSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument LocationWhereInput
    }


{-| Type for the LocationSubscriptionWhereInput input object.
-}
type LocationSubscriptionWhereInput
    = LocationSubscriptionWhereInput LocationSubscriptionWhereInputRaw


{-| Encode a LocationSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeLocationSubscriptionWhereInput : LocationSubscriptionWhereInput -> Value
encodeLocationSubscriptionWhereInput (LocationSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeLocationWhereInput |> Encode.optional input.node ) ]


buildLocationWhereInput : (LocationWhereInputOptionalFields -> LocationWhereInputOptionalFields) -> LocationWhereInput
buildLocationWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent }
    in
    LocationWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte }


type alias LocationWhereInputOptionalFields =
    { and : OptionalArgument (List LocationWhereInput)
    , or : OptionalArgument (List LocationWhereInput)
    , not : OptionalArgument (List LocationWhereInput)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    }


{-| Type alias for the `LocationWhereInput` attributes. Note that this type
needs to use the `LocationWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias LocationWhereInputRaw =
    { and : OptionalArgument (List LocationWhereInput)
    , or : OptionalArgument (List LocationWhereInput)
    , not : OptionalArgument (List LocationWhereInput)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    }


{-| Type for the LocationWhereInput input object.
-}
type LocationWhereInput
    = LocationWhereInput LocationWhereInputRaw


{-| Encode a LocationWhereInput into a value that can be used as an argument.
-}
encodeLocationWhereInput : LocationWhereInput -> Value
encodeLocationWhereInput (LocationWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ) ]


buildLocationWhereUniqueInput : (LocationWhereUniqueInputOptionalFields -> LocationWhereUniqueInputOptionalFields) -> LocationWhereUniqueInput
buildLocationWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias LocationWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Type for the LocationWhereUniqueInput input object.
-}
type alias LocationWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id }


{-| Encode a LocationWhereUniqueInput into a value that can be used as an argument.
-}
encodeLocationWhereUniqueInput : LocationWhereUniqueInput -> Value
encodeLocationWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildPageCreateInput : PageCreateInputRequiredFields -> (PageCreateInputOptionalFields -> PageCreateInputOptionalFields) -> PageCreateInput
buildPageCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, callToAction = Absent, image = Absent }
    in
    { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = required.path, callToAction = optionals.callToAction, image = optionals.image }


type alias PageCreateInputRequiredFields =
    { path : String }


type alias PageCreateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , callToAction : OptionalArgument CallToActionCreateOneWithoutPagesInput
    , image : OptionalArgument AssetCreateOneWithoutImagePageInput
    }


{-| Type for the PageCreateInput input object.
-}
type alias PageCreateInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : String
    , callToAction : OptionalArgument CallToActionCreateOneWithoutPagesInput
    , image : OptionalArgument AssetCreateOneWithoutImagePageInput
    }


{-| Encode a PageCreateInput into a value that can be used as an argument.
-}
encodePageCreateInput : PageCreateInput -> Value
encodePageCreateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string input.path |> Just ), ( "callToAction", encodeCallToActionCreateOneWithoutPagesInput |> Encode.optional input.callToAction ), ( "image", encodeAssetCreateOneWithoutImagePageInput |> Encode.optional input.image ) ]


buildPageCreateManyWithoutCallToActionInput : (PageCreateManyWithoutCallToActionInputOptionalFields -> PageCreateManyWithoutCallToActionInputOptionalFields) -> PageCreateManyWithoutCallToActionInput
buildPageCreateManyWithoutCallToActionInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    PageCreateManyWithoutCallToActionInput { create = optionals.create, connect = optionals.connect }


type alias PageCreateManyWithoutCallToActionInputOptionalFields =
    { create : OptionalArgument (List PageCreateWithoutCallToActionInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    }


{-| Type alias for the `PageCreateManyWithoutCallToActionInput` attributes. Note that this type
needs to use the `PageCreateManyWithoutCallToActionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageCreateManyWithoutCallToActionInputRaw =
    { create : OptionalArgument (List PageCreateWithoutCallToActionInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    }


{-| Type for the PageCreateManyWithoutCallToActionInput input object.
-}
type PageCreateManyWithoutCallToActionInput
    = PageCreateManyWithoutCallToActionInput PageCreateManyWithoutCallToActionInputRaw


{-| Encode a PageCreateManyWithoutCallToActionInput into a value that can be used as an argument.
-}
encodePageCreateManyWithoutCallToActionInput : PageCreateManyWithoutCallToActionInput -> Value
encodePageCreateManyWithoutCallToActionInput (PageCreateManyWithoutCallToActionInput input) =
    Encode.maybeObject
        [ ( "create", (encodePageCreateWithoutCallToActionInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildPageCreateManyWithoutImageInput : (PageCreateManyWithoutImageInputOptionalFields -> PageCreateManyWithoutImageInputOptionalFields) -> PageCreateManyWithoutImageInput
buildPageCreateManyWithoutImageInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    PageCreateManyWithoutImageInput { create = optionals.create, connect = optionals.connect }


type alias PageCreateManyWithoutImageInputOptionalFields =
    { create : OptionalArgument (List PageCreateWithoutImageInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    }


{-| Type alias for the `PageCreateManyWithoutImageInput` attributes. Note that this type
needs to use the `PageCreateManyWithoutImageInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageCreateManyWithoutImageInputRaw =
    { create : OptionalArgument (List PageCreateWithoutImageInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    }


{-| Type for the PageCreateManyWithoutImageInput input object.
-}
type PageCreateManyWithoutImageInput
    = PageCreateManyWithoutImageInput PageCreateManyWithoutImageInputRaw


{-| Encode a PageCreateManyWithoutImageInput into a value that can be used as an argument.
-}
encodePageCreateManyWithoutImageInput : PageCreateManyWithoutImageInput -> Value
encodePageCreateManyWithoutImageInput (PageCreateManyWithoutImageInput input) =
    Encode.maybeObject
        [ ( "create", (encodePageCreateWithoutImageInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildPageCreateWithoutCallToActionInput : PageCreateWithoutCallToActionInputRequiredFields -> (PageCreateWithoutCallToActionInputOptionalFields -> PageCreateWithoutCallToActionInputOptionalFields) -> PageCreateWithoutCallToActionInput
buildPageCreateWithoutCallToActionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, image = Absent }
    in
    { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = required.path, image = optionals.image }


type alias PageCreateWithoutCallToActionInputRequiredFields =
    { path : String }


type alias PageCreateWithoutCallToActionInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , image : OptionalArgument AssetCreateOneWithoutImagePageInput
    }


{-| Type for the PageCreateWithoutCallToActionInput input object.
-}
type alias PageCreateWithoutCallToActionInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : String
    , image : OptionalArgument AssetCreateOneWithoutImagePageInput
    }


{-| Encode a PageCreateWithoutCallToActionInput into a value that can be used as an argument.
-}
encodePageCreateWithoutCallToActionInput : PageCreateWithoutCallToActionInput -> Value
encodePageCreateWithoutCallToActionInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string input.path |> Just ), ( "image", encodeAssetCreateOneWithoutImagePageInput |> Encode.optional input.image ) ]


buildPageCreateWithoutImageInput : PageCreateWithoutImageInputRequiredFields -> (PageCreateWithoutImageInputOptionalFields -> PageCreateWithoutImageInputOptionalFields) -> PageCreateWithoutImageInput
buildPageCreateWithoutImageInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, callToAction = Absent }
    in
    { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = required.path, callToAction = optionals.callToAction }


type alias PageCreateWithoutImageInputRequiredFields =
    { path : String }


type alias PageCreateWithoutImageInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , callToAction : OptionalArgument CallToActionCreateOneWithoutPagesInput
    }


{-| Type for the PageCreateWithoutImageInput input object.
-}
type alias PageCreateWithoutImageInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : String
    , callToAction : OptionalArgument CallToActionCreateOneWithoutPagesInput
    }


{-| Encode a PageCreateWithoutImageInput into a value that can be used as an argument.
-}
encodePageCreateWithoutImageInput : PageCreateWithoutImageInput -> Value
encodePageCreateWithoutImageInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string input.path |> Just ), ( "callToAction", encodeCallToActionCreateOneWithoutPagesInput |> Encode.optional input.callToAction ) ]


buildPageSubscriptionWhereInput : (PageSubscriptionWhereInputOptionalFields -> PageSubscriptionWhereInputOptionalFields) -> PageSubscriptionWhereInput
buildPageSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    PageSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias PageSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List PageSubscriptionWhereInput)
    , or : OptionalArgument (List PageSubscriptionWhereInput)
    , not : OptionalArgument (List PageSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument PageWhereInput
    }


{-| Type alias for the `PageSubscriptionWhereInput` attributes. Note that this type
needs to use the `PageSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageSubscriptionWhereInputRaw =
    { and : OptionalArgument (List PageSubscriptionWhereInput)
    , or : OptionalArgument (List PageSubscriptionWhereInput)
    , not : OptionalArgument (List PageSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List CMS.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument PageWhereInput
    }


{-| Type for the PageSubscriptionWhereInput input object.
-}
type PageSubscriptionWhereInput
    = PageSubscriptionWhereInput PageSubscriptionWhereInputRaw


{-| Encode a PageSubscriptionWhereInput into a value that can be used as an argument.
-}
encodePageSubscriptionWhereInput : PageSubscriptionWhereInput -> Value
encodePageSubscriptionWhereInput (PageSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodePageSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodePageSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodePageSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum CMS.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodePageWhereInput |> Encode.optional input.node ) ]


buildPageUpdateInput : (PageUpdateInputOptionalFields -> PageUpdateInputOptionalFields) -> PageUpdateInput
buildPageUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, path = Absent, callToAction = Absent, image = Absent }
    in
    PageUpdateInput { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = optionals.path, callToAction = optionals.callToAction, image = optionals.image }


type alias PageUpdateInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    , callToAction : OptionalArgument CallToActionUpdateOneWithoutPagesInput
    , image : OptionalArgument AssetUpdateOneWithoutImagePageInput
    }


{-| Type alias for the `PageUpdateInput` attributes. Note that this type
needs to use the `PageUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    , callToAction : OptionalArgument CallToActionUpdateOneWithoutPagesInput
    , image : OptionalArgument AssetUpdateOneWithoutImagePageInput
    }


{-| Type for the PageUpdateInput input object.
-}
type PageUpdateInput
    = PageUpdateInput PageUpdateInputRaw


{-| Encode a PageUpdateInput into a value that can be used as an argument.
-}
encodePageUpdateInput : PageUpdateInput -> Value
encodePageUpdateInput (PageUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string |> Encode.optional input.path ), ( "callToAction", encodeCallToActionUpdateOneWithoutPagesInput |> Encode.optional input.callToAction ), ( "image", encodeAssetUpdateOneWithoutImagePageInput |> Encode.optional input.image ) ]


buildPageUpdateManyMutationInput : (PageUpdateManyMutationInputOptionalFields -> PageUpdateManyMutationInputOptionalFields) -> PageUpdateManyMutationInput
buildPageUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, path = Absent }
    in
    { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = optionals.path }


type alias PageUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    }


{-| Type for the PageUpdateManyMutationInput input object.
-}
type alias PageUpdateManyMutationInput =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    }


{-| Encode a PageUpdateManyMutationInput into a value that can be used as an argument.
-}
encodePageUpdateManyMutationInput : PageUpdateManyMutationInput -> Value
encodePageUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string |> Encode.optional input.path ) ]


buildPageUpdateManyWithoutCallToActionInput : (PageUpdateManyWithoutCallToActionInputOptionalFields -> PageUpdateManyWithoutCallToActionInputOptionalFields) -> PageUpdateManyWithoutCallToActionInput
buildPageUpdateManyWithoutCallToActionInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    PageUpdateManyWithoutCallToActionInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias PageUpdateManyWithoutCallToActionInputOptionalFields =
    { create : OptionalArgument (List PageCreateWithoutCallToActionInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    , disconnect : OptionalArgument (List PageWhereUniqueInput)
    , delete : OptionalArgument (List PageWhereUniqueInput)
    , update : OptionalArgument (List PageUpdateWithWhereUniqueWithoutCallToActionInput)
    , upsert : OptionalArgument (List PageUpsertWithWhereUniqueWithoutCallToActionInput)
    }


{-| Type alias for the `PageUpdateManyWithoutCallToActionInput` attributes. Note that this type
needs to use the `PageUpdateManyWithoutCallToActionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateManyWithoutCallToActionInputRaw =
    { create : OptionalArgument (List PageCreateWithoutCallToActionInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    , disconnect : OptionalArgument (List PageWhereUniqueInput)
    , delete : OptionalArgument (List PageWhereUniqueInput)
    , update : OptionalArgument (List PageUpdateWithWhereUniqueWithoutCallToActionInput)
    , upsert : OptionalArgument (List PageUpsertWithWhereUniqueWithoutCallToActionInput)
    }


{-| Type for the PageUpdateManyWithoutCallToActionInput input object.
-}
type PageUpdateManyWithoutCallToActionInput
    = PageUpdateManyWithoutCallToActionInput PageUpdateManyWithoutCallToActionInputRaw


{-| Encode a PageUpdateManyWithoutCallToActionInput into a value that can be used as an argument.
-}
encodePageUpdateManyWithoutCallToActionInput : PageUpdateManyWithoutCallToActionInput -> Value
encodePageUpdateManyWithoutCallToActionInput (PageUpdateManyWithoutCallToActionInput input) =
    Encode.maybeObject
        [ ( "create", (encodePageCreateWithoutCallToActionInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "disconnect", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodePageUpdateWithWhereUniqueWithoutCallToActionInput |> Encode.list) |> Encode.optional input.update ), ( "upsert", (encodePageUpsertWithWhereUniqueWithoutCallToActionInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildPageUpdateManyWithoutImageInput : (PageUpdateManyWithoutImageInputOptionalFields -> PageUpdateManyWithoutImageInputOptionalFields) -> PageUpdateManyWithoutImageInput
buildPageUpdateManyWithoutImageInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    PageUpdateManyWithoutImageInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias PageUpdateManyWithoutImageInputOptionalFields =
    { create : OptionalArgument (List PageCreateWithoutImageInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    , disconnect : OptionalArgument (List PageWhereUniqueInput)
    , delete : OptionalArgument (List PageWhereUniqueInput)
    , update : OptionalArgument (List PageUpdateWithWhereUniqueWithoutImageInput)
    , upsert : OptionalArgument (List PageUpsertWithWhereUniqueWithoutImageInput)
    }


{-| Type alias for the `PageUpdateManyWithoutImageInput` attributes. Note that this type
needs to use the `PageUpdateManyWithoutImageInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateManyWithoutImageInputRaw =
    { create : OptionalArgument (List PageCreateWithoutImageInput)
    , connect : OptionalArgument (List PageWhereUniqueInput)
    , disconnect : OptionalArgument (List PageWhereUniqueInput)
    , delete : OptionalArgument (List PageWhereUniqueInput)
    , update : OptionalArgument (List PageUpdateWithWhereUniqueWithoutImageInput)
    , upsert : OptionalArgument (List PageUpsertWithWhereUniqueWithoutImageInput)
    }


{-| Type for the PageUpdateManyWithoutImageInput input object.
-}
type PageUpdateManyWithoutImageInput
    = PageUpdateManyWithoutImageInput PageUpdateManyWithoutImageInputRaw


{-| Encode a PageUpdateManyWithoutImageInput into a value that can be used as an argument.
-}
encodePageUpdateManyWithoutImageInput : PageUpdateManyWithoutImageInput -> Value
encodePageUpdateManyWithoutImageInput (PageUpdateManyWithoutImageInput input) =
    Encode.maybeObject
        [ ( "create", (encodePageCreateWithoutImageInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "disconnect", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodePageWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodePageUpdateWithWhereUniqueWithoutImageInput |> Encode.list) |> Encode.optional input.update ), ( "upsert", (encodePageUpsertWithWhereUniqueWithoutImageInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildPageUpdateWithWhereUniqueWithoutCallToActionInput : PageUpdateWithWhereUniqueWithoutCallToActionInputRequiredFields -> PageUpdateWithWhereUniqueWithoutCallToActionInput
buildPageUpdateWithWhereUniqueWithoutCallToActionInput required =
    PageUpdateWithWhereUniqueWithoutCallToActionInput { where_ = required.where_, data = required.data }


type alias PageUpdateWithWhereUniqueWithoutCallToActionInputRequiredFields =
    { where_ : PageWhereUniqueInput
    , data : PageUpdateWithoutCallToActionDataInput
    }


{-| Type alias for the `PageUpdateWithWhereUniqueWithoutCallToActionInput` attributes. Note that this type
needs to use the `PageUpdateWithWhereUniqueWithoutCallToActionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateWithWhereUniqueWithoutCallToActionInputRaw =
    { where_ : PageWhereUniqueInput
    , data : PageUpdateWithoutCallToActionDataInput
    }


{-| Type for the PageUpdateWithWhereUniqueWithoutCallToActionInput input object.
-}
type PageUpdateWithWhereUniqueWithoutCallToActionInput
    = PageUpdateWithWhereUniqueWithoutCallToActionInput PageUpdateWithWhereUniqueWithoutCallToActionInputRaw


{-| Encode a PageUpdateWithWhereUniqueWithoutCallToActionInput into a value that can be used as an argument.
-}
encodePageUpdateWithWhereUniqueWithoutCallToActionInput : PageUpdateWithWhereUniqueWithoutCallToActionInput -> Value
encodePageUpdateWithWhereUniqueWithoutCallToActionInput (PageUpdateWithWhereUniqueWithoutCallToActionInput input) =
    Encode.maybeObject
        [ ( "where", encodePageWhereUniqueInput input.where_ |> Just ), ( "data", encodePageUpdateWithoutCallToActionDataInput input.data |> Just ) ]


buildPageUpdateWithWhereUniqueWithoutImageInput : PageUpdateWithWhereUniqueWithoutImageInputRequiredFields -> PageUpdateWithWhereUniqueWithoutImageInput
buildPageUpdateWithWhereUniqueWithoutImageInput required =
    PageUpdateWithWhereUniqueWithoutImageInput { where_ = required.where_, data = required.data }


type alias PageUpdateWithWhereUniqueWithoutImageInputRequiredFields =
    { where_ : PageWhereUniqueInput
    , data : PageUpdateWithoutImageDataInput
    }


{-| Type alias for the `PageUpdateWithWhereUniqueWithoutImageInput` attributes. Note that this type
needs to use the `PageUpdateWithWhereUniqueWithoutImageInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateWithWhereUniqueWithoutImageInputRaw =
    { where_ : PageWhereUniqueInput
    , data : PageUpdateWithoutImageDataInput
    }


{-| Type for the PageUpdateWithWhereUniqueWithoutImageInput input object.
-}
type PageUpdateWithWhereUniqueWithoutImageInput
    = PageUpdateWithWhereUniqueWithoutImageInput PageUpdateWithWhereUniqueWithoutImageInputRaw


{-| Encode a PageUpdateWithWhereUniqueWithoutImageInput into a value that can be used as an argument.
-}
encodePageUpdateWithWhereUniqueWithoutImageInput : PageUpdateWithWhereUniqueWithoutImageInput -> Value
encodePageUpdateWithWhereUniqueWithoutImageInput (PageUpdateWithWhereUniqueWithoutImageInput input) =
    Encode.maybeObject
        [ ( "where", encodePageWhereUniqueInput input.where_ |> Just ), ( "data", encodePageUpdateWithoutImageDataInput input.data |> Just ) ]


buildPageUpdateWithoutCallToActionDataInput : (PageUpdateWithoutCallToActionDataInputOptionalFields -> PageUpdateWithoutCallToActionDataInputOptionalFields) -> PageUpdateWithoutCallToActionDataInput
buildPageUpdateWithoutCallToActionDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, path = Absent, image = Absent }
    in
    PageUpdateWithoutCallToActionDataInput { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = optionals.path, image = optionals.image }


type alias PageUpdateWithoutCallToActionDataInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    , image : OptionalArgument AssetUpdateOneWithoutImagePageInput
    }


{-| Type alias for the `PageUpdateWithoutCallToActionDataInput` attributes. Note that this type
needs to use the `PageUpdateWithoutCallToActionDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateWithoutCallToActionDataInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    , image : OptionalArgument AssetUpdateOneWithoutImagePageInput
    }


{-| Type for the PageUpdateWithoutCallToActionDataInput input object.
-}
type PageUpdateWithoutCallToActionDataInput
    = PageUpdateWithoutCallToActionDataInput PageUpdateWithoutCallToActionDataInputRaw


{-| Encode a PageUpdateWithoutCallToActionDataInput into a value that can be used as an argument.
-}
encodePageUpdateWithoutCallToActionDataInput : PageUpdateWithoutCallToActionDataInput -> Value
encodePageUpdateWithoutCallToActionDataInput (PageUpdateWithoutCallToActionDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string |> Encode.optional input.path ), ( "image", encodeAssetUpdateOneWithoutImagePageInput |> Encode.optional input.image ) ]


buildPageUpdateWithoutImageDataInput : (PageUpdateWithoutImageDataInputOptionalFields -> PageUpdateWithoutImageDataInputOptionalFields) -> PageUpdateWithoutImageDataInput
buildPageUpdateWithoutImageDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, heading = Absent, subtitle = Absent, path = Absent, callToAction = Absent }
    in
    PageUpdateWithoutImageDataInput { status = optionals.status, title = optionals.title, heading = optionals.heading, subtitle = optionals.subtitle, path = optionals.path, callToAction = optionals.callToAction }


type alias PageUpdateWithoutImageDataInputOptionalFields =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    , callToAction : OptionalArgument CallToActionUpdateOneWithoutPagesInput
    }


{-| Type alias for the `PageUpdateWithoutImageDataInput` attributes. Note that this type
needs to use the `PageUpdateWithoutImageDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpdateWithoutImageDataInputRaw =
    { status : OptionalArgument CMS.Enum.Status.Status
    , title : OptionalArgument String
    , heading : OptionalArgument String
    , subtitle : OptionalArgument String
    , path : OptionalArgument String
    , callToAction : OptionalArgument CallToActionUpdateOneWithoutPagesInput
    }


{-| Type for the PageUpdateWithoutImageDataInput input object.
-}
type PageUpdateWithoutImageDataInput
    = PageUpdateWithoutImageDataInput PageUpdateWithoutImageDataInputRaw


{-| Encode a PageUpdateWithoutImageDataInput into a value that can be used as an argument.
-}
encodePageUpdateWithoutImageDataInput : PageUpdateWithoutImageDataInput -> Value
encodePageUpdateWithoutImageDataInput (PageUpdateWithoutImageDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "path", Encode.string |> Encode.optional input.path ), ( "callToAction", encodeCallToActionUpdateOneWithoutPagesInput |> Encode.optional input.callToAction ) ]


buildPageUpsertWithWhereUniqueWithoutCallToActionInput : PageUpsertWithWhereUniqueWithoutCallToActionInputRequiredFields -> PageUpsertWithWhereUniqueWithoutCallToActionInput
buildPageUpsertWithWhereUniqueWithoutCallToActionInput required =
    PageUpsertWithWhereUniqueWithoutCallToActionInput { where_ = required.where_, update = required.update, create = required.create }


type alias PageUpsertWithWhereUniqueWithoutCallToActionInputRequiredFields =
    { where_ : PageWhereUniqueInput
    , update : PageUpdateWithoutCallToActionDataInput
    , create : PageCreateWithoutCallToActionInput
    }


{-| Type alias for the `PageUpsertWithWhereUniqueWithoutCallToActionInput` attributes. Note that this type
needs to use the `PageUpsertWithWhereUniqueWithoutCallToActionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpsertWithWhereUniqueWithoutCallToActionInputRaw =
    { where_ : PageWhereUniqueInput
    , update : PageUpdateWithoutCallToActionDataInput
    , create : PageCreateWithoutCallToActionInput
    }


{-| Type for the PageUpsertWithWhereUniqueWithoutCallToActionInput input object.
-}
type PageUpsertWithWhereUniqueWithoutCallToActionInput
    = PageUpsertWithWhereUniqueWithoutCallToActionInput PageUpsertWithWhereUniqueWithoutCallToActionInputRaw


{-| Encode a PageUpsertWithWhereUniqueWithoutCallToActionInput into a value that can be used as an argument.
-}
encodePageUpsertWithWhereUniqueWithoutCallToActionInput : PageUpsertWithWhereUniqueWithoutCallToActionInput -> Value
encodePageUpsertWithWhereUniqueWithoutCallToActionInput (PageUpsertWithWhereUniqueWithoutCallToActionInput input) =
    Encode.maybeObject
        [ ( "where", encodePageWhereUniqueInput input.where_ |> Just ), ( "update", encodePageUpdateWithoutCallToActionDataInput input.update |> Just ), ( "create", encodePageCreateWithoutCallToActionInput input.create |> Just ) ]


buildPageUpsertWithWhereUniqueWithoutImageInput : PageUpsertWithWhereUniqueWithoutImageInputRequiredFields -> PageUpsertWithWhereUniqueWithoutImageInput
buildPageUpsertWithWhereUniqueWithoutImageInput required =
    PageUpsertWithWhereUniqueWithoutImageInput { where_ = required.where_, update = required.update, create = required.create }


type alias PageUpsertWithWhereUniqueWithoutImageInputRequiredFields =
    { where_ : PageWhereUniqueInput
    , update : PageUpdateWithoutImageDataInput
    , create : PageCreateWithoutImageInput
    }


{-| Type alias for the `PageUpsertWithWhereUniqueWithoutImageInput` attributes. Note that this type
needs to use the `PageUpsertWithWhereUniqueWithoutImageInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageUpsertWithWhereUniqueWithoutImageInputRaw =
    { where_ : PageWhereUniqueInput
    , update : PageUpdateWithoutImageDataInput
    , create : PageCreateWithoutImageInput
    }


{-| Type for the PageUpsertWithWhereUniqueWithoutImageInput input object.
-}
type PageUpsertWithWhereUniqueWithoutImageInput
    = PageUpsertWithWhereUniqueWithoutImageInput PageUpsertWithWhereUniqueWithoutImageInputRaw


{-| Encode a PageUpsertWithWhereUniqueWithoutImageInput into a value that can be used as an argument.
-}
encodePageUpsertWithWhereUniqueWithoutImageInput : PageUpsertWithWhereUniqueWithoutImageInput -> Value
encodePageUpsertWithWhereUniqueWithoutImageInput (PageUpsertWithWhereUniqueWithoutImageInput input) =
    Encode.maybeObject
        [ ( "where", encodePageWhereUniqueInput input.where_ |> Just ), ( "update", encodePageUpdateWithoutImageDataInput input.update |> Just ), ( "create", encodePageCreateWithoutImageInput input.create |> Just ) ]


buildPageWhereInput : (PageWhereInputOptionalFields -> PageWhereInputOptionalFields) -> PageWhereInput
buildPageWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, heading = Absent, heading_not = Absent, heading_in = Absent, heading_not_in = Absent, heading_lt = Absent, heading_lte = Absent, heading_gt = Absent, heading_gte = Absent, heading_contains = Absent, heading_not_contains = Absent, heading_starts_with = Absent, heading_not_starts_with = Absent, heading_ends_with = Absent, heading_not_ends_with = Absent, subtitle = Absent, subtitle_not = Absent, subtitle_in = Absent, subtitle_not_in = Absent, subtitle_lt = Absent, subtitle_lte = Absent, subtitle_gt = Absent, subtitle_gte = Absent, subtitle_contains = Absent, subtitle_not_contains = Absent, subtitle_starts_with = Absent, subtitle_not_starts_with = Absent, subtitle_ends_with = Absent, subtitle_not_ends_with = Absent, path = Absent, path_not = Absent, path_in = Absent, path_not_in = Absent, path_lt = Absent, path_lte = Absent, path_gt = Absent, path_gte = Absent, path_contains = Absent, path_not_contains = Absent, path_starts_with = Absent, path_not_starts_with = Absent, path_ends_with = Absent, path_not_ends_with = Absent, callToAction = Absent, image = Absent }
    in
    PageWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, heading = optionals.heading, heading_not = optionals.heading_not, heading_in = optionals.heading_in, heading_not_in = optionals.heading_not_in, heading_lt = optionals.heading_lt, heading_lte = optionals.heading_lte, heading_gt = optionals.heading_gt, heading_gte = optionals.heading_gte, heading_contains = optionals.heading_contains, heading_not_contains = optionals.heading_not_contains, heading_starts_with = optionals.heading_starts_with, heading_not_starts_with = optionals.heading_not_starts_with, heading_ends_with = optionals.heading_ends_with, heading_not_ends_with = optionals.heading_not_ends_with, subtitle = optionals.subtitle, subtitle_not = optionals.subtitle_not, subtitle_in = optionals.subtitle_in, subtitle_not_in = optionals.subtitle_not_in, subtitle_lt = optionals.subtitle_lt, subtitle_lte = optionals.subtitle_lte, subtitle_gt = optionals.subtitle_gt, subtitle_gte = optionals.subtitle_gte, subtitle_contains = optionals.subtitle_contains, subtitle_not_contains = optionals.subtitle_not_contains, subtitle_starts_with = optionals.subtitle_starts_with, subtitle_not_starts_with = optionals.subtitle_not_starts_with, subtitle_ends_with = optionals.subtitle_ends_with, subtitle_not_ends_with = optionals.subtitle_not_ends_with, path = optionals.path, path_not = optionals.path_not, path_in = optionals.path_in, path_not_in = optionals.path_not_in, path_lt = optionals.path_lt, path_lte = optionals.path_lte, path_gt = optionals.path_gt, path_gte = optionals.path_gte, path_contains = optionals.path_contains, path_not_contains = optionals.path_not_contains, path_starts_with = optionals.path_starts_with, path_not_starts_with = optionals.path_not_starts_with, path_ends_with = optionals.path_ends_with, path_not_ends_with = optionals.path_not_ends_with, callToAction = optionals.callToAction, image = optionals.image }


type alias PageWhereInputOptionalFields =
    { and : OptionalArgument (List PageWhereInput)
    , or : OptionalArgument (List PageWhereInput)
    , not : OptionalArgument (List PageWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , heading : OptionalArgument String
    , heading_not : OptionalArgument String
    , heading_in : OptionalArgument (List String)
    , heading_not_in : OptionalArgument (List String)
    , heading_lt : OptionalArgument String
    , heading_lte : OptionalArgument String
    , heading_gt : OptionalArgument String
    , heading_gte : OptionalArgument String
    , heading_contains : OptionalArgument String
    , heading_not_contains : OptionalArgument String
    , heading_starts_with : OptionalArgument String
    , heading_not_starts_with : OptionalArgument String
    , heading_ends_with : OptionalArgument String
    , heading_not_ends_with : OptionalArgument String
    , subtitle : OptionalArgument String
    , subtitle_not : OptionalArgument String
    , subtitle_in : OptionalArgument (List String)
    , subtitle_not_in : OptionalArgument (List String)
    , subtitle_lt : OptionalArgument String
    , subtitle_lte : OptionalArgument String
    , subtitle_gt : OptionalArgument String
    , subtitle_gte : OptionalArgument String
    , subtitle_contains : OptionalArgument String
    , subtitle_not_contains : OptionalArgument String
    , subtitle_starts_with : OptionalArgument String
    , subtitle_not_starts_with : OptionalArgument String
    , subtitle_ends_with : OptionalArgument String
    , subtitle_not_ends_with : OptionalArgument String
    , path : OptionalArgument String
    , path_not : OptionalArgument String
    , path_in : OptionalArgument (List String)
    , path_not_in : OptionalArgument (List String)
    , path_lt : OptionalArgument String
    , path_lte : OptionalArgument String
    , path_gt : OptionalArgument String
    , path_gte : OptionalArgument String
    , path_contains : OptionalArgument String
    , path_not_contains : OptionalArgument String
    , path_starts_with : OptionalArgument String
    , path_not_starts_with : OptionalArgument String
    , path_ends_with : OptionalArgument String
    , path_not_ends_with : OptionalArgument String
    , callToAction : OptionalArgument CallToActionWhereInput
    , image : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `PageWhereInput` attributes. Note that this type
needs to use the `PageWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias PageWhereInputRaw =
    { and : OptionalArgument (List PageWhereInput)
    , or : OptionalArgument (List PageWhereInput)
    , not : OptionalArgument (List PageWhereInput)
    , status : OptionalArgument CMS.Enum.Status.Status
    , status_not : OptionalArgument CMS.Enum.Status.Status
    , status_in : OptionalArgument (List CMS.Enum.Status.Status)
    , status_not_in : OptionalArgument (List CMS.Enum.Status.Status)
    , id : OptionalArgument CMS.Scalar.Id
    , id_not : OptionalArgument CMS.Scalar.Id
    , id_in : OptionalArgument (List CMS.Scalar.Id)
    , id_not_in : OptionalArgument (List CMS.Scalar.Id)
    , id_lt : OptionalArgument CMS.Scalar.Id
    , id_lte : OptionalArgument CMS.Scalar.Id
    , id_gt : OptionalArgument CMS.Scalar.Id
    , id_gte : OptionalArgument CMS.Scalar.Id
    , id_contains : OptionalArgument CMS.Scalar.Id
    , id_not_contains : OptionalArgument CMS.Scalar.Id
    , id_starts_with : OptionalArgument CMS.Scalar.Id
    , id_not_starts_with : OptionalArgument CMS.Scalar.Id
    , id_ends_with : OptionalArgument CMS.Scalar.Id
    , id_not_ends_with : OptionalArgument CMS.Scalar.Id
    , createdAt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_not : OptionalArgument CMS.Scalar.DateTime
    , createdAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , createdAt_lt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_lte : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gt : OptionalArgument CMS.Scalar.DateTime
    , createdAt_gte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_not : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_not_in : OptionalArgument (List CMS.Scalar.DateTime)
    , updatedAt_lt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_lte : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gt : OptionalArgument CMS.Scalar.DateTime
    , updatedAt_gte : OptionalArgument CMS.Scalar.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , heading : OptionalArgument String
    , heading_not : OptionalArgument String
    , heading_in : OptionalArgument (List String)
    , heading_not_in : OptionalArgument (List String)
    , heading_lt : OptionalArgument String
    , heading_lte : OptionalArgument String
    , heading_gt : OptionalArgument String
    , heading_gte : OptionalArgument String
    , heading_contains : OptionalArgument String
    , heading_not_contains : OptionalArgument String
    , heading_starts_with : OptionalArgument String
    , heading_not_starts_with : OptionalArgument String
    , heading_ends_with : OptionalArgument String
    , heading_not_ends_with : OptionalArgument String
    , subtitle : OptionalArgument String
    , subtitle_not : OptionalArgument String
    , subtitle_in : OptionalArgument (List String)
    , subtitle_not_in : OptionalArgument (List String)
    , subtitle_lt : OptionalArgument String
    , subtitle_lte : OptionalArgument String
    , subtitle_gt : OptionalArgument String
    , subtitle_gte : OptionalArgument String
    , subtitle_contains : OptionalArgument String
    , subtitle_not_contains : OptionalArgument String
    , subtitle_starts_with : OptionalArgument String
    , subtitle_not_starts_with : OptionalArgument String
    , subtitle_ends_with : OptionalArgument String
    , subtitle_not_ends_with : OptionalArgument String
    , path : OptionalArgument String
    , path_not : OptionalArgument String
    , path_in : OptionalArgument (List String)
    , path_not_in : OptionalArgument (List String)
    , path_lt : OptionalArgument String
    , path_lte : OptionalArgument String
    , path_gt : OptionalArgument String
    , path_gte : OptionalArgument String
    , path_contains : OptionalArgument String
    , path_not_contains : OptionalArgument String
    , path_starts_with : OptionalArgument String
    , path_not_starts_with : OptionalArgument String
    , path_ends_with : OptionalArgument String
    , path_not_ends_with : OptionalArgument String
    , callToAction : OptionalArgument CallToActionWhereInput
    , image : OptionalArgument AssetWhereInput
    }


{-| Type for the PageWhereInput input object.
-}
type PageWhereInput
    = PageWhereInput PageWhereInputRaw


{-| Encode a PageWhereInput into a value that can be used as an argument.
-}
encodePageWhereInput : PageWhereInput -> Value
encodePageWhereInput (PageWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodePageWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodePageWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodePageWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum CMS.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum CMS.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(CMS.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "heading", Encode.string |> Encode.optional input.heading ), ( "heading_not", Encode.string |> Encode.optional input.heading_not ), ( "heading_in", (Encode.string |> Encode.list) |> Encode.optional input.heading_in ), ( "heading_not_in", (Encode.string |> Encode.list) |> Encode.optional input.heading_not_in ), ( "heading_lt", Encode.string |> Encode.optional input.heading_lt ), ( "heading_lte", Encode.string |> Encode.optional input.heading_lte ), ( "heading_gt", Encode.string |> Encode.optional input.heading_gt ), ( "heading_gte", Encode.string |> Encode.optional input.heading_gte ), ( "heading_contains", Encode.string |> Encode.optional input.heading_contains ), ( "heading_not_contains", Encode.string |> Encode.optional input.heading_not_contains ), ( "heading_starts_with", Encode.string |> Encode.optional input.heading_starts_with ), ( "heading_not_starts_with", Encode.string |> Encode.optional input.heading_not_starts_with ), ( "heading_ends_with", Encode.string |> Encode.optional input.heading_ends_with ), ( "heading_not_ends_with", Encode.string |> Encode.optional input.heading_not_ends_with ), ( "subtitle", Encode.string |> Encode.optional input.subtitle ), ( "subtitle_not", Encode.string |> Encode.optional input.subtitle_not ), ( "subtitle_in", (Encode.string |> Encode.list) |> Encode.optional input.subtitle_in ), ( "subtitle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.subtitle_not_in ), ( "subtitle_lt", Encode.string |> Encode.optional input.subtitle_lt ), ( "subtitle_lte", Encode.string |> Encode.optional input.subtitle_lte ), ( "subtitle_gt", Encode.string |> Encode.optional input.subtitle_gt ), ( "subtitle_gte", Encode.string |> Encode.optional input.subtitle_gte ), ( "subtitle_contains", Encode.string |> Encode.optional input.subtitle_contains ), ( "subtitle_not_contains", Encode.string |> Encode.optional input.subtitle_not_contains ), ( "subtitle_starts_with", Encode.string |> Encode.optional input.subtitle_starts_with ), ( "subtitle_not_starts_with", Encode.string |> Encode.optional input.subtitle_not_starts_with ), ( "subtitle_ends_with", Encode.string |> Encode.optional input.subtitle_ends_with ), ( "subtitle_not_ends_with", Encode.string |> Encode.optional input.subtitle_not_ends_with ), ( "path", Encode.string |> Encode.optional input.path ), ( "path_not", Encode.string |> Encode.optional input.path_not ), ( "path_in", (Encode.string |> Encode.list) |> Encode.optional input.path_in ), ( "path_not_in", (Encode.string |> Encode.list) |> Encode.optional input.path_not_in ), ( "path_lt", Encode.string |> Encode.optional input.path_lt ), ( "path_lte", Encode.string |> Encode.optional input.path_lte ), ( "path_gt", Encode.string |> Encode.optional input.path_gt ), ( "path_gte", Encode.string |> Encode.optional input.path_gte ), ( "path_contains", Encode.string |> Encode.optional input.path_contains ), ( "path_not_contains", Encode.string |> Encode.optional input.path_not_contains ), ( "path_starts_with", Encode.string |> Encode.optional input.path_starts_with ), ( "path_not_starts_with", Encode.string |> Encode.optional input.path_not_starts_with ), ( "path_ends_with", Encode.string |> Encode.optional input.path_ends_with ), ( "path_not_ends_with", Encode.string |> Encode.optional input.path_not_ends_with ), ( "callToAction", encodeCallToActionWhereInput |> Encode.optional input.callToAction ), ( "image", encodeAssetWhereInput |> Encode.optional input.image ) ]


buildPageWhereUniqueInput : (PageWhereUniqueInputOptionalFields -> PageWhereUniqueInputOptionalFields) -> PageWhereUniqueInput
buildPageWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, path = Absent }
    in
    { id = optionals.id, path = optionals.path }


type alias PageWhereUniqueInputOptionalFields =
    { id : OptionalArgument CMS.Scalar.Id
    , path : OptionalArgument String
    }


{-| Type for the PageWhereUniqueInput input object.
-}
type alias PageWhereUniqueInput =
    { id : OptionalArgument CMS.Scalar.Id
    , path : OptionalArgument String
    }


{-| Encode a PageWhereUniqueInput into a value that can be used as an argument.
-}
encodePageWhereUniqueInput : PageWhereUniqueInput -> Value
encodePageWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(CMS.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "path", Encode.string |> Encode.optional input.path ) ]
