-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CMS.Interface.Node exposing (Fragments, fragments, id, maybeFragments)

import CMS.InputObject
import CMS.Interface
import CMS.Object
import CMS.Scalar
import CMS.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onAsset : SelectionSet decodesTo CMS.Object.Asset
    , onPage : SelectionSet decodesTo CMS.Object.Page
    , onCallToAction : SelectionSet decodesTo CMS.Object.CallToAction
    , onColor : SelectionSet decodesTo CMS.Object.Color
    , onLocation : SelectionSet decodesTo CMS.Object.Location
    , onFaq : SelectionSet decodesTo CMS.Object.Faq
    , onExplanationBlock : SelectionSet decodesTo CMS.Object.ExplanationBlock
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo CMS.Interface.Node
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "Asset" selections.onAsset
        , Object.buildFragment "Page" selections.onPage
        , Object.buildFragment "CallToAction" selections.onCallToAction
        , Object.buildFragment "Color" selections.onColor
        , Object.buildFragment "Location" selections.onLocation
        , Object.buildFragment "Faq" selections.onFaq
        , Object.buildFragment "ExplanationBlock" selections.onExplanationBlock
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onAsset = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPage = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCallToAction = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onColor = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onLocation = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onFaq = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onExplanationBlock = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The id of the object.
-}
id : SelectionSet CMS.Scalar.Id CMS.Interface.Node
id =
    Object.selectionForField "Scalar.Id" "id" [] (Object.scalarDecoder |> Decode.map CMS.Scalar.Id)
