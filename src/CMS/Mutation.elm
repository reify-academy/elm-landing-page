-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CMS.Mutation exposing (CreateAssetRequiredArguments, CreateCallToActionRequiredArguments, CreateExplanationBlockRequiredArguments, CreateFaqRequiredArguments, CreatePageRequiredArguments, DeleteAssetRequiredArguments, DeleteCallToActionRequiredArguments, DeleteColorRequiredArguments, DeleteExplanationBlockRequiredArguments, DeleteFaqRequiredArguments, DeleteLocationRequiredArguments, DeleteManyAssetsOptionalArguments, DeleteManyCallToActionsOptionalArguments, DeleteManyColorsOptionalArguments, DeleteManyExplanationBlocksOptionalArguments, DeleteManyFaqsOptionalArguments, DeleteManyLocationsOptionalArguments, DeleteManyPagesOptionalArguments, DeletePageRequiredArguments, UpdateAssetRequiredArguments, UpdateCallToActionRequiredArguments, UpdateExplanationBlockRequiredArguments, UpdateFaqRequiredArguments, UpdateManyAssetsOptionalArguments, UpdateManyAssetsRequiredArguments, UpdateManyCallToActionsOptionalArguments, UpdateManyCallToActionsRequiredArguments, UpdateManyExplanationBlocksOptionalArguments, UpdateManyExplanationBlocksRequiredArguments, UpdateManyFaqsOptionalArguments, UpdateManyFaqsRequiredArguments, UpdateManyPagesOptionalArguments, UpdateManyPagesRequiredArguments, UpdatePageRequiredArguments, UpsertAssetRequiredArguments, UpsertCallToActionRequiredArguments, UpsertExplanationBlockRequiredArguments, UpsertFaqRequiredArguments, UpsertPageRequiredArguments, createAsset, createCallToAction, createColor, createExplanationBlock, createFaq, createLocation, createPage, deleteAsset, deleteCallToAction, deleteColor, deleteExplanationBlock, deleteFaq, deleteLocation, deleteManyAssets, deleteManyCallToActions, deleteManyColors, deleteManyExplanationBlocks, deleteManyFaqs, deleteManyLocations, deleteManyPages, deletePage, updateAsset, updateCallToAction, updateExplanationBlock, updateFaq, updateManyAssets, updateManyCallToActions, updateManyExplanationBlocks, updateManyFaqs, updateManyPages, updatePage, upsertAsset, upsertCallToAction, upsertExplanationBlock, upsertFaq, upsertPage)

import CMS.InputObject
import CMS.Interface
import CMS.Object
import CMS.Scalar
import CMS.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateAssetRequiredArguments =
    { data : CMS.InputObject.AssetCreateInput }


createAsset : CreateAssetRequiredArguments -> SelectionSet decodesTo CMS.Object.Asset -> SelectionSet decodesTo RootMutation
createAsset requiredArgs object_ =
    Object.selectionForCompositeField "createAsset" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeAssetCreateInput ] object_ identity


createColor : SelectionSet decodesTo CMS.Object.Color -> SelectionSet decodesTo RootMutation
createColor object_ =
    Object.selectionForCompositeField "createColor" [] object_ identity


createLocation : SelectionSet decodesTo CMS.Object.Location -> SelectionSet decodesTo RootMutation
createLocation object_ =
    Object.selectionForCompositeField "createLocation" [] object_ identity


type alias CreatePageRequiredArguments =
    { data : CMS.InputObject.PageCreateInput }


createPage : CreatePageRequiredArguments -> SelectionSet decodesTo CMS.Object.Page -> SelectionSet decodesTo RootMutation
createPage requiredArgs object_ =
    Object.selectionForCompositeField "createPage" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodePageCreateInput ] object_ identity


type alias CreateCallToActionRequiredArguments =
    { data : CMS.InputObject.CallToActionCreateInput }


createCallToAction : CreateCallToActionRequiredArguments -> SelectionSet decodesTo CMS.Object.CallToAction -> SelectionSet decodesTo RootMutation
createCallToAction requiredArgs object_ =
    Object.selectionForCompositeField "createCallToAction" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeCallToActionCreateInput ] object_ identity


type alias CreateFaqRequiredArguments =
    { data : CMS.InputObject.FaqCreateInput }


createFaq : CreateFaqRequiredArguments -> SelectionSet decodesTo CMS.Object.Faq -> SelectionSet decodesTo RootMutation
createFaq requiredArgs object_ =
    Object.selectionForCompositeField "createFaq" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeFaqCreateInput ] object_ identity


type alias CreateExplanationBlockRequiredArguments =
    { data : CMS.InputObject.ExplanationBlockCreateInput }


createExplanationBlock : CreateExplanationBlockRequiredArguments -> SelectionSet decodesTo CMS.Object.ExplanationBlock -> SelectionSet decodesTo RootMutation
createExplanationBlock requiredArgs object_ =
    Object.selectionForCompositeField "createExplanationBlock" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeExplanationBlockCreateInput ] object_ identity


type alias UpdateAssetRequiredArguments =
    { data : CMS.InputObject.AssetUpdateInput
    , where_ : CMS.InputObject.AssetWhereUniqueInput
    }


updateAsset : UpdateAssetRequiredArguments -> SelectionSet decodesTo CMS.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
updateAsset requiredArgs object_ =
    Object.selectionForCompositeField "updateAsset" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeAssetUpdateInput, Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeAssetWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdatePageRequiredArguments =
    { data : CMS.InputObject.PageUpdateInput
    , where_ : CMS.InputObject.PageWhereUniqueInput
    }


updatePage : UpdatePageRequiredArguments -> SelectionSet decodesTo CMS.Object.Page -> SelectionSet (Maybe decodesTo) RootMutation
updatePage requiredArgs object_ =
    Object.selectionForCompositeField "updatePage" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodePageUpdateInput, Argument.required "where" requiredArgs.where_ CMS.InputObject.encodePageWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdateCallToActionRequiredArguments =
    { data : CMS.InputObject.CallToActionUpdateInput
    , where_ : CMS.InputObject.CallToActionWhereUniqueInput
    }


updateCallToAction : UpdateCallToActionRequiredArguments -> SelectionSet decodesTo CMS.Object.CallToAction -> SelectionSet (Maybe decodesTo) RootMutation
updateCallToAction requiredArgs object_ =
    Object.selectionForCompositeField "updateCallToAction" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeCallToActionUpdateInput, Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeCallToActionWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdateFaqRequiredArguments =
    { data : CMS.InputObject.FaqUpdateInput
    , where_ : CMS.InputObject.FaqWhereUniqueInput
    }


updateFaq : UpdateFaqRequiredArguments -> SelectionSet decodesTo CMS.Object.Faq -> SelectionSet (Maybe decodesTo) RootMutation
updateFaq requiredArgs object_ =
    Object.selectionForCompositeField "updateFaq" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeFaqUpdateInput, Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeFaqWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdateExplanationBlockRequiredArguments =
    { data : CMS.InputObject.ExplanationBlockUpdateInput
    , where_ : CMS.InputObject.ExplanationBlockWhereUniqueInput
    }


updateExplanationBlock : UpdateExplanationBlockRequiredArguments -> SelectionSet decodesTo CMS.Object.ExplanationBlock -> SelectionSet (Maybe decodesTo) RootMutation
updateExplanationBlock requiredArgs object_ =
    Object.selectionForCompositeField "updateExplanationBlock" [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeExplanationBlockUpdateInput, Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeExplanationBlockWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteAssetRequiredArguments =
    { where_ : CMS.InputObject.AssetWhereUniqueInput }


deleteAsset : DeleteAssetRequiredArguments -> SelectionSet decodesTo CMS.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
deleteAsset requiredArgs object_ =
    Object.selectionForCompositeField "deleteAsset" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeAssetWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteColorRequiredArguments =
    { where_ : CMS.InputObject.ColorWhereUniqueInput }


deleteColor : DeleteColorRequiredArguments -> SelectionSet decodesTo CMS.Object.Color -> SelectionSet (Maybe decodesTo) RootMutation
deleteColor requiredArgs object_ =
    Object.selectionForCompositeField "deleteColor" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeColorWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteLocationRequiredArguments =
    { where_ : CMS.InputObject.LocationWhereUniqueInput }


deleteLocation : DeleteLocationRequiredArguments -> SelectionSet decodesTo CMS.Object.Location -> SelectionSet (Maybe decodesTo) RootMutation
deleteLocation requiredArgs object_ =
    Object.selectionForCompositeField "deleteLocation" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeLocationWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeletePageRequiredArguments =
    { where_ : CMS.InputObject.PageWhereUniqueInput }


deletePage : DeletePageRequiredArguments -> SelectionSet decodesTo CMS.Object.Page -> SelectionSet (Maybe decodesTo) RootMutation
deletePage requiredArgs object_ =
    Object.selectionForCompositeField "deletePage" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodePageWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteCallToActionRequiredArguments =
    { where_ : CMS.InputObject.CallToActionWhereUniqueInput }


deleteCallToAction : DeleteCallToActionRequiredArguments -> SelectionSet decodesTo CMS.Object.CallToAction -> SelectionSet (Maybe decodesTo) RootMutation
deleteCallToAction requiredArgs object_ =
    Object.selectionForCompositeField "deleteCallToAction" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeCallToActionWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteFaqRequiredArguments =
    { where_ : CMS.InputObject.FaqWhereUniqueInput }


deleteFaq : DeleteFaqRequiredArguments -> SelectionSet decodesTo CMS.Object.Faq -> SelectionSet (Maybe decodesTo) RootMutation
deleteFaq requiredArgs object_ =
    Object.selectionForCompositeField "deleteFaq" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeFaqWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteExplanationBlockRequiredArguments =
    { where_ : CMS.InputObject.ExplanationBlockWhereUniqueInput }


deleteExplanationBlock : DeleteExplanationBlockRequiredArguments -> SelectionSet decodesTo CMS.Object.ExplanationBlock -> SelectionSet (Maybe decodesTo) RootMutation
deleteExplanationBlock requiredArgs object_ =
    Object.selectionForCompositeField "deleteExplanationBlock" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeExplanationBlockWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpsertAssetRequiredArguments =
    { where_ : CMS.InputObject.AssetWhereUniqueInput
    , create : CMS.InputObject.AssetCreateInput
    , update : CMS.InputObject.AssetUpdateInput
    }


upsertAsset : UpsertAssetRequiredArguments -> SelectionSet decodesTo CMS.Object.Asset -> SelectionSet decodesTo RootMutation
upsertAsset requiredArgs object_ =
    Object.selectionForCompositeField "upsertAsset" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeAssetWhereUniqueInput, Argument.required "create" requiredArgs.create CMS.InputObject.encodeAssetCreateInput, Argument.required "update" requiredArgs.update CMS.InputObject.encodeAssetUpdateInput ] object_ identity


type alias UpsertPageRequiredArguments =
    { where_ : CMS.InputObject.PageWhereUniqueInput
    , create : CMS.InputObject.PageCreateInput
    , update : CMS.InputObject.PageUpdateInput
    }


upsertPage : UpsertPageRequiredArguments -> SelectionSet decodesTo CMS.Object.Page -> SelectionSet decodesTo RootMutation
upsertPage requiredArgs object_ =
    Object.selectionForCompositeField "upsertPage" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodePageWhereUniqueInput, Argument.required "create" requiredArgs.create CMS.InputObject.encodePageCreateInput, Argument.required "update" requiredArgs.update CMS.InputObject.encodePageUpdateInput ] object_ identity


type alias UpsertCallToActionRequiredArguments =
    { where_ : CMS.InputObject.CallToActionWhereUniqueInput
    , create : CMS.InputObject.CallToActionCreateInput
    , update : CMS.InputObject.CallToActionUpdateInput
    }


upsertCallToAction : UpsertCallToActionRequiredArguments -> SelectionSet decodesTo CMS.Object.CallToAction -> SelectionSet decodesTo RootMutation
upsertCallToAction requiredArgs object_ =
    Object.selectionForCompositeField "upsertCallToAction" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeCallToActionWhereUniqueInput, Argument.required "create" requiredArgs.create CMS.InputObject.encodeCallToActionCreateInput, Argument.required "update" requiredArgs.update CMS.InputObject.encodeCallToActionUpdateInput ] object_ identity


type alias UpsertFaqRequiredArguments =
    { where_ : CMS.InputObject.FaqWhereUniqueInput
    , create : CMS.InputObject.FaqCreateInput
    , update : CMS.InputObject.FaqUpdateInput
    }


upsertFaq : UpsertFaqRequiredArguments -> SelectionSet decodesTo CMS.Object.Faq -> SelectionSet decodesTo RootMutation
upsertFaq requiredArgs object_ =
    Object.selectionForCompositeField "upsertFaq" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeFaqWhereUniqueInput, Argument.required "create" requiredArgs.create CMS.InputObject.encodeFaqCreateInput, Argument.required "update" requiredArgs.update CMS.InputObject.encodeFaqUpdateInput ] object_ identity


type alias UpsertExplanationBlockRequiredArguments =
    { where_ : CMS.InputObject.ExplanationBlockWhereUniqueInput
    , create : CMS.InputObject.ExplanationBlockCreateInput
    , update : CMS.InputObject.ExplanationBlockUpdateInput
    }


upsertExplanationBlock : UpsertExplanationBlockRequiredArguments -> SelectionSet decodesTo CMS.Object.ExplanationBlock -> SelectionSet decodesTo RootMutation
upsertExplanationBlock requiredArgs object_ =
    Object.selectionForCompositeField "upsertExplanationBlock" [ Argument.required "where" requiredArgs.where_ CMS.InputObject.encodeExplanationBlockWhereUniqueInput, Argument.required "create" requiredArgs.create CMS.InputObject.encodeExplanationBlockCreateInput, Argument.required "update" requiredArgs.update CMS.InputObject.encodeExplanationBlockUpdateInput ] object_ identity


type alias UpdateManyAssetsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.AssetWhereInput }


type alias UpdateManyAssetsRequiredArguments =
    { data : CMS.InputObject.AssetUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyAssets : (UpdateManyAssetsOptionalArguments -> UpdateManyAssetsOptionalArguments) -> UpdateManyAssetsRequiredArguments -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyAssets fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeAssetWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyAssets" (optionalArgs ++ [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeAssetUpdateManyMutationInput ]) object_ identity


type alias UpdateManyPagesOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.PageWhereInput }


type alias UpdateManyPagesRequiredArguments =
    { data : CMS.InputObject.PageUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyPages : (UpdateManyPagesOptionalArguments -> UpdateManyPagesOptionalArguments) -> UpdateManyPagesRequiredArguments -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyPages fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodePageWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyPages" (optionalArgs ++ [ Argument.required "data" requiredArgs.data CMS.InputObject.encodePageUpdateManyMutationInput ]) object_ identity


type alias UpdateManyCallToActionsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.CallToActionWhereInput }


type alias UpdateManyCallToActionsRequiredArguments =
    { data : CMS.InputObject.CallToActionUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyCallToActions : (UpdateManyCallToActionsOptionalArguments -> UpdateManyCallToActionsOptionalArguments) -> UpdateManyCallToActionsRequiredArguments -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyCallToActions fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeCallToActionWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyCallToActions" (optionalArgs ++ [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeCallToActionUpdateManyMutationInput ]) object_ identity


type alias UpdateManyFaqsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.FaqWhereInput }


type alias UpdateManyFaqsRequiredArguments =
    { data : CMS.InputObject.FaqUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyFaqs : (UpdateManyFaqsOptionalArguments -> UpdateManyFaqsOptionalArguments) -> UpdateManyFaqsRequiredArguments -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyFaqs fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeFaqWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyFaqs" (optionalArgs ++ [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeFaqUpdateManyMutationInput ]) object_ identity


type alias UpdateManyExplanationBlocksOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.ExplanationBlockWhereInput }


type alias UpdateManyExplanationBlocksRequiredArguments =
    { data : CMS.InputObject.ExplanationBlockUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyExplanationBlocks : (UpdateManyExplanationBlocksOptionalArguments -> UpdateManyExplanationBlocksOptionalArguments) -> UpdateManyExplanationBlocksRequiredArguments -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyExplanationBlocks fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeExplanationBlockWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyExplanationBlocks" (optionalArgs ++ [ Argument.required "data" requiredArgs.data CMS.InputObject.encodeExplanationBlockUpdateManyMutationInput ]) object_ identity


type alias DeleteManyAssetsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.AssetWhereInput }


{-|

  - where\_ -

-}
deleteManyAssets : (DeleteManyAssetsOptionalArguments -> DeleteManyAssetsOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyAssets fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeAssetWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyAssets" optionalArgs object_ identity


type alias DeleteManyColorsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.ColorWhereInput }


{-|

  - where\_ -

-}
deleteManyColors : (DeleteManyColorsOptionalArguments -> DeleteManyColorsOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyColors fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeColorWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyColors" optionalArgs object_ identity


type alias DeleteManyLocationsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.LocationWhereInput }


{-|

  - where\_ -

-}
deleteManyLocations : (DeleteManyLocationsOptionalArguments -> DeleteManyLocationsOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyLocations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeLocationWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyLocations" optionalArgs object_ identity


type alias DeleteManyPagesOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.PageWhereInput }


{-|

  - where\_ -

-}
deleteManyPages : (DeleteManyPagesOptionalArguments -> DeleteManyPagesOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyPages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodePageWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyPages" optionalArgs object_ identity


type alias DeleteManyCallToActionsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.CallToActionWhereInput }


{-|

  - where\_ -

-}
deleteManyCallToActions : (DeleteManyCallToActionsOptionalArguments -> DeleteManyCallToActionsOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyCallToActions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeCallToActionWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyCallToActions" optionalArgs object_ identity


type alias DeleteManyFaqsOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.FaqWhereInput }


{-|

  - where\_ -

-}
deleteManyFaqs : (DeleteManyFaqsOptionalArguments -> DeleteManyFaqsOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyFaqs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeFaqWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyFaqs" optionalArgs object_ identity


type alias DeleteManyExplanationBlocksOptionalArguments =
    { where_ : OptionalArgument CMS.InputObject.ExplanationBlockWhereInput }


{-|

  - where\_ -

-}
deleteManyExplanationBlocks : (DeleteManyExplanationBlocksOptionalArguments -> DeleteManyExplanationBlocksOptionalArguments) -> SelectionSet decodesTo CMS.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyExplanationBlocks fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ CMS.InputObject.encodeExplanationBlockWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyExplanationBlocks" optionalArgs object_ identity
