-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.OrganizationIdentityProvider exposing (ExternalIdentitiesOptionalArguments, digestMethod, externalIdentities, id, idpCertificate, issuer, organization, signatureMethod, ssoUrl)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The digest algorithm used to sign SAML requests for the Identity Provider.
-}
digestMethod : SelectionSet (Maybe Github.Scalar.Uri) Github.Object.OrganizationIdentityProvider
digestMethod =
    Object.selectionForField "(Maybe Scalar.Uri)" "digestMethod" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Uri |> Decode.nullable)


type alias ExternalIdentitiesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| External Identities provisioned by this Identity Provider

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
externalIdentities : (ExternalIdentitiesOptionalArguments -> ExternalIdentitiesOptionalArguments) -> SelectionSet decodesTo Github.Object.ExternalIdentityConnection -> SelectionSet decodesTo Github.Object.OrganizationIdentityProvider
externalIdentities fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "externalIdentities" optionalArgs object_ identity


id : SelectionSet Github.Scalar.Id Github.Object.OrganizationIdentityProvider
id =
    Object.selectionForField "Scalar.Id" "id" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Id)


{-| The x509 certificate used by the Identity Provder to sign assertions and responses.
-}
idpCertificate : SelectionSet (Maybe Github.Scalar.X509Certificate) Github.Object.OrganizationIdentityProvider
idpCertificate =
    Object.selectionForField "(Maybe Scalar.X509Certificate)" "idpCertificate" [] (Object.scalarDecoder |> Decode.map Github.Scalar.X509Certificate |> Decode.nullable)


{-| The Issuer Entity ID for the SAML Identity Provider
-}
issuer : SelectionSet (Maybe String) Github.Object.OrganizationIdentityProvider
issuer =
    Object.selectionForField "(Maybe String)" "issuer" [] (Decode.string |> Decode.nullable)


{-| Organization this Identity Provider belongs to
-}
organization : SelectionSet decodesTo Github.Object.Organization -> SelectionSet (Maybe decodesTo) Github.Object.OrganizationIdentityProvider
organization object_ =
    Object.selectionForCompositeField "organization" [] object_ (identity >> Decode.nullable)


{-| The signature algorithm used to sign SAML requests for the Identity Provider.
-}
signatureMethod : SelectionSet (Maybe Github.Scalar.Uri) Github.Object.OrganizationIdentityProvider
signatureMethod =
    Object.selectionForField "(Maybe Scalar.Uri)" "signatureMethod" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Uri |> Decode.nullable)


{-| The URL endpoint for the Identity Provider's SAML SSO.
-}
ssoUrl : SelectionSet (Maybe Github.Scalar.Uri) Github.Object.OrganizationIdentityProvider
ssoUrl =
    Object.selectionForField "(Maybe Scalar.Uri)" "ssoUrl" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Uri |> Decode.nullable)
